<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Support</Name>
    <Version>1.4.5</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2013-04-16 15:22:27" Version="1.4.5">Changed term subscription -&gt; service contract.</ChangeLog>
    <ChangeLog Date="2013-01-24 00:56:37" Version="1.4.4">New checks for MySQL Database, bugfixes.</ChangeLog>
    <ChangeLog Date="2013-01-17 10:26:05" Version="1.4.3">Small bugfixes.</ChangeLog>
    <ChangeLog Date="2013-01-17 07:18:35" Version="1.4.2">Included new checks for Apache web server.</ChangeLog>
    <ChangeLog Date="2012-10-11 06:59:29" Version="1.4.1">Init release for OTRS 3.2.</ChangeLog>
    <Description Lang="en">Verifies System settings and gives performance tips.</Description>
    <Description Lang="de">Das Support-Assessment-Modul prüft fehlerhafte System-Einstellungen und gibt Performance-Tips.</Description>
    <Description Lang="es">Comprueba configuraciones del sistema y brinda consejos de rendimiento.</Description>
    <Framework>3.2.x</Framework>
    <IntroInstall Lang="en" Title="Notice - Introduction" Type="post">The Support assessment module provides system checks and can help to find setup errors. After installation it can be accessed from the Administration Interface, in the System Administration panel.</IntroInstall>
    <IntroInstall Lang="de" Title="Hinweis - Einführung" Type="post">Das Support-Assessment-Modul bietet Systemüberprüfungen an, mit denen Einrichtungsfehler erkannt werden können. Nach der Installation kann es über den Administrationsbereich im Abschnitt System-Administration aufgerufen werden.</IntroInstall>
    <IntroInstall Lang="es" Title="Notice - Introduction" Type="post">El módulo de evaluación de soporte proporciona comprobaciones del sistema y puede ayudar a encontrar errores de configuración. Después de la instalación se puede acceder desde la Interfaz de Administración, en el panel de administración del sistema.</IntroInstall>
    <BuildDate>2013-04-16 15:22:27</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/Support.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_MX_Support.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9lc19NWF9TdXBwb3J0LnBtIC0gdHJhbnNsYXRpb24gZmlsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDEzIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogZXNfTVhfU3VwcG9ydC5wbSx2IDEuNSAyMDEzLzA0LzE2IDEzOjAzOjIwIG1nIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TGFuZ3VhZ2U6OmVzX01YX1N1cHBvcnQ7Cgp1c2Ugc3RyaWN0OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAjIFRlbXBsYXRlOiBBZG1pblN1cHBvcnQKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1N1cHBvcnQgQXNzZXNzbWVudCd9ID0gJ1ZhbG9yYWNpb25lcyBkZSBzb3BvcnRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1N0YXJ0IHN1cHBvcnQnfSA9ICdDb21lbnphciBzb3BvcnRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NRTCBiZW5jaG1hcmsnfSA9ICdDb21wYXJhdGl2YSBTUUwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRm9yIHF1aWNrIGhlbHAgcGxlYXNlIHN1Ym1pdCB5b3VyIHN5c3RlbSBpbmZvcm1hdGlvbiBhbmQgY3JlYXRlIGEgc3VwcG9ydCB0aWNrZXQgYXQgdGhlIHZlbmRvclwncyBzaXRlLid9ID0KICAgICAgICAnUGFyYSBheXVkYSByw6FwaWRhIHBvciBmYXZvciBzdW1pbmlzdHJlIHN1IGluZm9ybWFjacOzbiB5IGNyZWUgdW4gdGlja2V0IGRlIHNvcG9ydGUgZW4gZWwgc2l0aW8gZGVsIHByb3ZlZWRvcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGb3IgbW9yZSBpbmZvIHBsZWFzZSBjaGVjayd9ID0gJ1BhcmEgbWFzIGluZm9ybWFjacOzbiBwb3IgZmF2b3IgdmlzaXRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FkbWluIFN1cHBvcnQgSW5mbyd9ID0gJ0luZm9ybWFjacOzbiBkZSBzb3BvcnRlIHBhcmEgYWRtaW5pc3RyYWNpw7NuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FkbWluLVN1cHBvcnQgT3ZlcnZpZXcuJ30gPSAnUmVzdW1lbiBkZSBpbmZvcm1hY2nDs24gZGUgc29wb3J0ZSBwYXJhIGFkbWluaXN0cmFjacOzbi4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlkZW50aWFsIGluZm9ybWF0aW9uJ30gPSAnSW5mb3JtYWNpw7NuIGNvbmZpZGVuY2lhbCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydWZW5kb3IgU3VwcG9ydCd9ID0gJ1NvcG9ydGUgZGUgcHJvdmVlZG9yJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0J1Z3ppbGxhIElEJ30gPSAnSWRlbnRpZmljYWRvciBCdWd6aWxsYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJZiB5b3VcJ3ZlIGFscmVhZHkgYWRkZWQgYSBCdWd6aWxsYSByZXBvcnQgYXQgYnVncy5vdHJzLm9yZywgcGxlYXNlIGFkZCB5b3VyIEJ1Z3ppbGxhIElEIGhlcmUuJ30gPQogICAgICAgICdTaSB5YSBoYSBhZ3JlZ2FkbyB1biByZXBvcnRlIGRlIGVycm9yIGVuIGJ1Z3Mub3Rycy5vcmcsIHBvciBmYXZvciBhZ3JlZ3VlIHN1IGlkZW50aWZpY2Fkb3IgZGUgQnVnemlsbGEgYXF1aS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VydmljZSBDb250cmFjdCd9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQbGVhc2UgcmVjb21tZW5kIG1lIGEgU2VydmljZSBDb250cmFjdCB0byBvcHRpbWl6ZSBteSBPVFJTJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2FuXCd0IGNyZWF0ZSBzdXBwb3J0IHBhY2thZ2UsIGJlY2F1c2UgeW91IHdvcmsgY3VycmVudGx5IHdpdGggdGhlIHN5c3RlbSB1c2VyIHJvb3RAbG9jYWxob3N0IGFuZCB5b3VyIGFkbWluIGVtYWlsIGFkZHJlc3MgaXMgbm90IHlldCBjb25maWd1cmVkLiBQbGVhc2UgZGVmaW5lIHRoZSBhZG1pbiBlbWFpbCBzZXR0aW5nIGluIHRoZSBTeXNDb25maWcgbW9kdWxlIGFuZCBkb25cJ3QgdXNlIHRoZSB1c2VyIHJvb3RAbG9jYWxob3N0IGZvciB3b3JraW5nIHdpdGggT1RSUy4nfSA9CiAgICAgICAgJ05vIGVzIHBvc2libGUgY3JlYXIgdW4gcGFxdWV0ZSBkZSBzb3BvcnRlLCBkZWJpZG8gYSBxdWUgc2UgZW5jdWVudHJhIGFjdHVhbG1lbnRlIHV0aWxpemFuZG8gZWwgdXN1YXJpbyBkZSBzaXN0ZW1hIHJvb3RAbG9jYWxob3N0LCB5IHN1IGN1ZW50YSBkZSBjb3JyZW8gZWxlY3Ryw7NuaWNvIHBhcmEgYWRtaW5pc3RyYWNpw7NuIG5vIHNlIGVuY3VlbnRyYSBjb25maWd1cmFkYSwgcG9yIGZhdm9yIGRlZmluYSBsYXMgY29uZmlndXJhY2lvbmVzIHBlcnRpbmVudGVzIHBhcmEgZGljaG8gY29ycmVvIGVsZWN0csOzbmljbyBlbiBlbCBtb2R1bG8gZGUgQ29uZmlndXJhY2nDs24gZGVsIHNpc3RlbWEgeSBubyB1dGlsaXplIGVsIHVzdWFyaW8gcm9vdEBsb2NhbGhvc3QgcGFyYSB0cmFiYWphciBjb24gT1RSUy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGxlYXNlIGNvbmZpcm0gdGhlIGNvbmZpZGVudGlhbCBpbmZvcm1hdGlvbiB0byBjb250aW51ZS4nfSA9ICdQb3IgZmF2b3IgY29uZmlybWUgc3UgaW5mb3JtYWNpw7NuIGNvbmZpZGVuY2lhbCBwYXJhIGNvbnRpbnVhci4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTG9va3MgZmluZSEnfSA9ICdTZSB2ZSBiaWVuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J09rJ30gPSAnT2snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvdWxkIG5vdCB0YWtlIG1vcmUgdGhhbid9ID0gJ05vIGRlYmVyw61hIHRhcmRhciBtYXMgZGUgJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J29uIGFuIGF2ZXJhZ2Ugc3lzdGVtJ30gPSAnZW4gdW4gc2lzdGVtYSBwcm9tZWRpbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydCZW5jaG1hcmsnfSA9ICdDb21wYXJhdGl2YSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydFeGVjdXRlIGEgU1FMIGJlbmNobWFyayB0ZXN0IG9uIHlvdXIgZGF0YWJhc2UgdG8gZmluZCBvdXQgaG93IGZhc3QgeW91ciBkYXRhYmFzZSBpcyAoZG9uZSBvbiBkZWRpY2F0ZWQgYmVuY2htYXJrIHRhYmxlKS4nfSA9CiAgICAgICAgJ0VqZWN1dGEgdW5hIGNvbXBhcmF0aXZhIFNRTCBwYXJhIGNvbm9jZXIgcXVlIHRhbiByw6FwaWRhIGVzIHN1IGJhc2UgZGUgZGF0b3MgKFNlIHJlYWxpemEgZW4gdW5hIHRhYmxhIGRlZGljYWRhIHBhcmEgZGljaGEgY29tcGFyYXRpdmEpLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGlzIHNob3VsZCBub3QgYmUgZG9uZSBvbiBwcm9kdWN0aW9uIHN5c3RlbXMhJ30gPSAnTm8gZGViZXLDoSBzZXIgZWplY3V0YWRhIGVuIHVuIHNpc3RlbWEgZW4gcHJvZHVjY2nDs24hJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J011bHRpcGxpZXInfSA9ICdNdWx0aXBsaWNhZG9yJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BsZWFzZSBzZWxlY3QgYSBtdWx0aXBsaWVyIGFuZCBwcmVzcyBzdGFydCBidXR0b24uJ30gPSAnUG9yIGZhdm9yIHNlbGVjY2lvbmUgdW4gbXVsdGlwbGljYWRvciB5IHByZXNpb25lIGVsIGJvdMOzbiBkZSBpbmljaWFyLic7CgogICAgIyBUZW1wbGF0ZTogQWRtaW5TdXBwb3J0TGljZW5zZVRleHQKCiAgICAjIFN5c0NvbmZpZwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSB1c2VkIHNlbmRlciBtYWlsIGFkZHJlc3MuJ30gPSAnRGlyZWNjacOzbiBkZSBjb3JyZW8gcGFyYSBlbnZpYXIgcGFxdWV0ZXMgZGUgc29wb3J0ZS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgQ3JvbiBjaGVja3MuJ30gPSAnRGVmaW5pY2nDs24gZGUgbGFzIHZlcmlmaWNhY2lvbmVzIHBhcmEgQ3Jvbic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uIG9mIHRoZSBPVFJTIGNoZWNrcy4nfSA9ICdEZWZpbmljacOzbiBkZSBsYXMgdmVyaWZpY2FjaW9uZXMgcGFyYSBPVFJTJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIE9wZXJhdGluZyBTeXN0ZW0gY2hlY2tzLid9ID0gJ0RlZmluaWNpw7NuIGRlIGxhcyB2ZXJpZmljYWNpb25lcyBwYXJhIGVsIFNpc3RlbWEgT3BlcmF0aXZvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIGRhdGFiYXNlIGNoZWNrcyBmb3IgdGhlIERCMiBkYXRhYmFzZS4nfSA9ICdEZWZpbmljacOzbiBkZSBsYXMgdmVyaWZpY2FjaW9uZXMgcGFyYSBsYSBiYXNlIGRlIGRhdG9zIERCMic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uIG9mIHRoZSBkYXRhYmFzZSBjaGVja3MgZm9yIHRoZSBNU1NRTCBkYXRhYmFzZS4nfSA9ICdEZWZpbmljacOzbiBkZSBsYXMgdmVyaWZpY2FjaW9uZXMgcGFyYSBsYSBiYXNlIGRlIGRhdG9zIE1TU1FMJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIGRhdGFiYXNlIGNoZWNrcyBmb3IgdGhlIE15U1FMIGRhdGFiYXNlLid9ID0gJ0RlZmluaWNpw7NuIGRlIGxhcyB2ZXJpZmljYWNpb25lcyBwYXJhIGxhIGJhc2UgZGUgZGF0b3MgTXlTUUwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgZGF0YWJhc2UgY2hlY2tzIGZvciB0aGUgT3JhY2xlIGRhdGFiYXNlLid9ID0gJ0RlZmluaWNpw7NuIGRlIGxhcyB2ZXJpZmljYWNpb25lcyBwYXJhIGxhIGJhc2UgZGUgZGF0b3MgT3JhY2xlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIGRhdGFiYXNlIGNoZWNrcyBmb3IgdGhlIFBvc3RncmVTUUwgZGF0YWJhc2UuJ30gPSAnRGVmaW5pY2nDs24gZGUgbGFzIHZlcmlmaWNhY2lvbmVzIHBhcmEgbGEgYmFzZSBkZSBkYXRvcyBQb3N0Z3JlU1FMJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIHdlYnNlcnZlciBjaGVja3MgZm9yIHRoZSBBcGFjaGUgd2Vic2VydmVyLid9ID0gJ0RlZmluaWNpw7NuIGRlIGxhcyB2ZXJpZmljYWNpb25lcyBwYXJhIGVsIHNlcnZpZG9yIHdlYiBBcGFjaGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgd2Vic2VydmVyIGNoZWNrcyBmb3IgdGhlIElJUyB3ZWJzZXJ2ZXIuJ30gPSAnRGVmaW5pY2nDs24gZGUgbGFzIHZlcmlmaWNhY2lvbmVzIHBhcmEgZWwgc2Vydmlkb3Igd2ViIElJUyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgQWRtaW5TeXN0ZW1TdGF0dXMgb2JqZWN0IGluIHRoZSBhZG1pbiBhcmVhLid9ID0gJ1JlZ2lzdHJvIGVuIGVsIHNpc3RlbWEgZGVsIG1vZHVsbyBkZSBzb3BvcnRlLic7CgogICAgIyBEYXRhYmFzZQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGF0YWJhc2UnfSA9ICdCYXNlIGRlIGRhdG9zJzsKCiAgICAjIG15c3FsCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBNeVNRTCB2ZXJzaW9uIGZvdW5kLid9ID0gJ05vIGZ1ZSBlbmNvbnRyYWRhIG5pbmd1bmEgdmVyc2nDs24gZGUgTXlTUUwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTXlTUUwgdmVyc2lvbid9ID0gJ1ZlcnNpw7NuIGRlIE15U1FMJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3lvdSBzaG91bGQgdXNlIDQuMSBvciBoaWdoZXIuJ30gPSAnZGViZXLDrWEgZGUgdXNhciBsYSB2ZXJzacOzbiA0LjEgbyBzdXBlcmlvci4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVW5rbm93biBNeVNRTCB2ZXJzaW9uJ30gPSAnVmVyc2nDs24gZGUgYmFzZSBkZSBkYXRvcyBNeVNRTCBkZXNjb25vY2lkYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEYXRhYmFzZSBWZXJzaW9uLid9ID0gJ1ZlcnNpw7NuIGRlIGJhc2UgZGUgZGF0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgZGF0YWJhc2UgdmVyc2lvbi4nfSA9ICdWZXJpZmljYSBsYSB2ZXJzacOzbiBkZSBiYXNlIGRlIGRhdG9zJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEYXRhYmFzZSAodXRmOCknfSA9ICdCYXNlIGRlIGRhdG9zICh1dGY4KSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBkYXRhYmFzZSB1dGY4IHN1cHBvcnQuJ30gPSAnVmVyaWZpY2Egc29wb3J0ZSBwYXJhIHV0ZjggZW4gbGEgYmFzZSBkZSBkYXRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTm8gZGF0YWJhc2UgdmVyc2lvbiBmb3VuZC4nfSA9ICdObyBmdWUgZW5jb250cmFkYSB2ZXJzacOzbiBwYXJhIGxhIGJhc2UgZGUgZGF0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91ciBkYXRhYmFzZSB2ZXJzaW9uIHN1cHBvcnRzIHV0ZjguJ30gPSAnTGEgdmVyc2nDs24gZGUgYmFzZSBkZSBkYXRvcyBzb3BvcnRhIHV0ZjgnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsndXRmOCBpcyBub3Qgc3VwcG9ydGVkJ30gPSAndXRmOCBubyBlcyBzb3BvcnRhZG8nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05vIGNoYXJhY3Rlcl9zZXRfY2xpZW50IHNldHRpbmcgZm91bmQuJ30gPSAnTm8gZnVlIGVuY29udHJhZGEgbGEgY29uZmlndXJhY2nDs24gY2hhcmFjdGVyX3NldF9jbGllbnQnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91ciBjbGllbnQgY29ubmVjdGlvbiBpcyd9ID0gJ1R1IGNvbmV4aW9uIGRlIGNsaWVudGUgZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiRm91bmQgY2hhcmFjdGVyX3NldF9jbGllbnQsIGJ1dCBpdCdzIHNldCB0byJ9ID0gJ1NlIGVuY29udHLDsyBjaGFyYWN0ZXJfc2V0X2NsaWVudCwgcGVybyB0aWVuZSB1biB2YWxvciBkZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyduZWVkcyB0byBiZSB1dGY4J30gPSAnbmVjZXNpdGEgc2VyIHV0ZjgnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2xpZW50IENvbm5lY3Rpb24gKHV0ZjgpJ30gPSAnQ29uZXhpb24gZGUgY2xpZW50ZSAodXRmOCknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgdGhlIGNsaWVudCB1c2VzIHV0ZjggZm9yIHRoZSBjb25uZWN0aW9uLid9ID0gJ1ZlcmlmaWNhIHNpIGVsIGNsaWVudGUgdXRpbGl6YSB1dGY4IHBhcmEgbGEgY29uZXhpw7NuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBjaGFyYWN0ZXJfc2V0X2RhdGFiYXNlIHNldHRpbmcgZm91bmQuJ30gPSAnTm8gc2UgaGEgZW5jb250cmFkbyBsYSBjb25maWd1cmFjacOzbiAiY2hhcmFjdGVyX3NldF9kYXRhYmFzZSInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiQ2hhcmFjdGVyX3NldF9kYXRhYmFzZSBzZXR0aW5nIGZvdW5kLCBidXQgaXQncyBzZXQgdG8ifSA9ICdTZSBoYSBlbmNvbnRyYWRvIGxhIGNvbmZpZ3VyYWNpw7NuICJjaGFyYWN0ZXJfc2V0X2RhdGFiYXNlIiwgcGVybyBjb24gdW4gdmFsb3IgZGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnbmVlZHMgdG8gYmUgdXRmOCd9ID0gJ25lY2VzaXRhIHNlciB1dGY4JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdXIgZGF0YWJhc2UgY2hhcnNldCBzZXR0aW5nIGlzJ30gPSAnTGEgY29uZmlndXJhY2nDs24gZGUganVlZ28gZGUgY2FyYWN0ZXJlcyBwYXJhIHR1IGJhc2UgZGUgZGF0b3MgZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGF0YWJhc2UgQ2hhcnNldCAodXRmOCknfSA9ICdKdWVnbyBkZSBjYXJhY3RlcmVzIGRlIGxhIGJhc2UgZGUgZGF0b3MgKHV0ZjgpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGlmIHRoZSBkYXRhYmFzZSB1c2VzIHV0ZjggYXMgY2hhcnNldC4nfSA9ICdWZXJpZmljYSBzaSBsYSBiYXNlIGRlIGRhdG9zIHV0aWxpemEgdXRmOCBjb21vIGp1ZWdvIGRlIGNhcmFjdGVyZXMuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbnZhbGlkIGNoYXJzZXQgY29sbGF0aW9uIGZvcid9ID0gJ0NvdGVqYWRvIGRlIGp1ZWdvIGRlIGNhcmFjdGVyZXMgaW52YWxpZG8gcGFyYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUYWJsZSBDb2xsYXRpb24gKHV0ZjgpJ30gPSAnQ290ZWphZG8gZGUgdGFibGEgKHV0ZjgpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIHRoZSB1dGY4IHRhYmxlIGNoYXJzZXQgY29sbGF0aW9uLid9ID0gJ1ZlcmlmaWNhIGVsIGNvdGVqYWRvIGRlIGp1ZWdvIGRlIGNhcmFjdGVyZXMgdXRmOCBkZSBsYXMgdGFibGFzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdXIgY2hhcnNldCBjb2xsYXRpb24gaXMgc2V0IHRvJ30gPSAnRWwgY290ZWphZG8gZGUganVlZ28gZGUgY2FyYWN0ZXJlcyBzZSBlbmN1ZW50cmEgY29sb2NhZG8gYSc7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTm8gIm1heF9hbGxvd2VkX3BhY2tldCIgY29uZmlndXJhdGlvbiBmb3VuZC4nfSA9ICdObyBzZSBoYSBlbmNvbnRyYWRvIGxhIGNvbmZpZ3VyYWNpw7NuICJtYXhfYWxsb3dlZF9wYWNrZXQiJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57InNob3VsZCBiZSBoaWdoZXIgdGhhbiA3IE1CIChpdCdzIn0gPSAnRGViZXLDrWEgc2VyIG1heW9yIGEgNyBNQiAoZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91ciBjb25maWd1cmF0aW9uIHNldHRpbmcgaXMnfSA9ICdMYSBvcGNpw7NuIGRlIGNvbmZpZ3VyYWNpw7NuIGVzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01heCBQYWNrYWdlIFNpemUnfSA9ICdUYW1hw7FvIG3DoXhpbW8gZGUgcGFxdWV0ZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayAibWF4X2FsbG93ZWRfcGFja2V0IiBzZXR0aW5nLid9ID0gJ1ZlcmlmaWNhIGxhIGNvbmZpZ3VyYWNpw7NuICJtYXhfYWxsb3dlZF9wYWNrZXQiJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyAicXVlcnlfY2FjaGVfc2l6ZSIgc2V0dGluZyBmb3VuZC4nfSA9ICdObyBzZSBoYSBlbmNvbnRyYWRvIGxhIGNvbmZpZ3VyYWNpw7NuICJxdWVyeV9jYWNoZV9zaXplIi4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIHNldHRpbmcgInF1ZXJ5X2NhY2hlX3NpemUiIHNob3VsZCBiZSB1c2VkLid9ID0gJ0xhIGNvbmZpZ3VyYWNpw7NuICJxdWVyeV9jYWNoZV9zaXplIiBkZWJlIHNlciB1c2FkYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyJUaGUgc2V0dGluZyAncXVlcnlfY2FjaGVfc2l6ZScgc2hvdWxkIGJlIGhpZ2hlciB0aGFuIDEwIE1CIChpdCdzIn0gPSAnTGEgY29uZmlndXJhY2nDs24gInF1ZXJ5X2NhY2hlX3NpemUiIGRlYmUgc2VyIG1heW9yIGEgMTAgTUIgKGVzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1F1ZXJ5IENhY2hlIFNpemUnfSA9ICd0YW1hw7FvIGRlbCBjYWNoZSBwYXJhIGNvbnN1bHRhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrICJxdWVyeV9jYWNoZV9zaXplIiBzZXR0aW5nLid9ID0gJ1ZlcmlmaWNhIGxhIGNvbmZpZ3VyYWNpw7NuICJxdWVyeV9jYWNoZV9zaXplIic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGFwcGxpY2F0aW9uIHNlcnZlciB0aW1lIGFuZCBkYXRhYmFzZSBzZXJ2ZXIgdGltZS4nfSA9ICdObyBleGlzdGUgZGlmZXJlbmNpYSBlbnRyZSBlbCB0aWVtcG8gZGVsIHNlcnZpZG9yIHkgZWwgZGUgbGEgYmFzZSBkZSBkYXRvcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGVyZSBpcyBhIG1hdGVyaWFsIGRpZmZlcmVuY2UgKCd9ID0gJ0V4aXN0ZSB1bmEgZGlmZXJlbmNpYSBub3RhYmxlICgnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnIHNlY29uZHMpIGJldHdlZW4gYXBwbGljYXRpb24gc2VydmVyICgnfSA9ICcgc2VndW5kb3MpIGVudHJlIGVsIHNlcnZpZG9yIGRlIGFwbGljYWNpw7NuICgnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnKSBhbmQgZGF0YWJhc2Ugc2VydmVyICgnfSA9ICcpIHkgZWwgc2Vydmlkb3IgZGUgYmFzZSBkZSBkYXRvcyAoJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57JykgdGltZS4nfSA9ICcpIHRpZW1wbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDdXJyZW50IFRpbWVzdGFtcCBDaGVjayd9ID0gJ1ZlcmlmaWNhY2nDs24gZGUgbGEgbWFyY2EgZGUgdGllbXBvIGFjdHVhbCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayAiU3lzdGVtIFRpbWUiIHZzICJDdXJyZW50IFRpbWVzdGFtcCIuJ30gPSAnVmVyaWZpY2EgbGFzIHZhcmlhYmxlcyBkZSB0aWVtcG8gIlN5c3RlbSBUaW1lIiBjb250cmEgIkN1cnJlbnQgVGltZXN0YW1wIi4nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3VuYWJsZSB0byBjaGVjayB0YWJsZSd9ID0gJ05vIGVzIHBvc2libGUgdmVyaWZpY2FyIGxhIHRhYmxhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3RhYmxlcyBjaGVja2VkLid9ID0gJ3RhYmxhcyB2ZXJpZmljYWRhcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGFibGUgQ2hlY2snfSA9ICdWZXJpZmljYWNpw7NuIGRlIHRhYmxhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGV4aXN0aW5nIGZyYW1ld29yayB0YWJsZXMuJ30gPSAnVmVyaWZpY2EgbGFzIHRhYmxhcyBleGlzdGVudGVzIHBhcmEgZWwgc2lzdGVtYSBiYXNlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57IkNhbid0IG9wZW4gZmlsZSJ9ID0gJ05vIHNlIHB1ZWRlIGFicmlyIGVsIGFyY2hpdm8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiQ2FuJ3QgZmluZCBmaWxlIn0gPSAnTm8gc2UgcHVlZGUgZW5jb250cmFyIGVsIGFyY2hpdm8nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvdWxkIG5vdCBkZXRlcm1pbmUgZGF0YWJhc2Ugc2l6ZS4nfSA9ICdObyBzZSBoYSBwb2RpZG8gZGV0ZXJtaW5hciBlbCB0YW1hw7FvIGRlIGxhIGJhc2UgZGUgZGF0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGF0YWJhc2Ugc2l6ZSBpcyd9ID0gJ0VsIHRhbWHDsW8gZGUgYmFzZSBkZSBkYXRvcyBlcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb3VsZCBub3QgZGV0ZXJtaW5lIGRhdGFiYXNlIG5hbWUuJ30gPSAnTm8gaGEgc2lkbyBwb3NpYmxlIGRldGVybWluYXIgZWwgbm9tYnJlIGRlIGxhIGJhc2UgZGUgZGF0b3MuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RhdGFiYXNlIFNpemUnfSA9ICdUYW1hw7FvIGRlIGxhIGJhc2UgZGUgZGF0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2l6ZSBvZiB0aGUgY3VycmVudCBkYXRhYmFzZS4nfSA9ICdUYW1hw7FvIGFjdHVhbCBkZSBsYSBiYXNlIGRlIGRhdG9zLic7CgogICAgIyBQb3N0Z3Jlc3FsCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydub25leGlzdGluZyB0YWJsZShzKSd9ID0gJ3RhYmxhKHMpIGluZXhpc3RlbnRlKHMpJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydVbmtub3duIERhdGVTdHlsZSd9ID0gJ0VzdGlsbyBkZSBmZWNoYSBkZXNjb25vY2lkbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyduZWVkIElTTy4nfSA9ICdJU08gZXMgbmVjZXNhcmlvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RhdGVTdHlsZSd9ID0gJ0VzdGlsbyBkZSBmZWNoYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBEYXRlU3R5bGUuJ30gPSAnVmVyaWZpY2EgZWwgZXN0aWxvIGRlIGZlY2hhJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBzZXJ2ZXJfZW5jb2RpbmcgZm91bmQuJ30gPSAnc2VydmVyX2VuY29kaW5nIG5vIGZ1ZSBlbmNvbnRyYWRvLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyJTZXR0aW5nIHNlcnZlcl9lbmNvZGluZyBmb3VuZCwgYnV0IGl0J3Mgc2V0IHRvIn0gPSAnQ29uZmlndXJhY2nDs24gc2VydmVyX2VuY29kaW5nLCBwZXJvIGNvbG9jYWRhIGNvbiB2YWxvciBkZSAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnKG5lZWQgdG8gYmUgVU5JQ09ERSBvciBVVEY4KS4nfSA9ICcobmVjZXNpdGEgc2VyIFVOSUNPREUgbyBVVEY4KS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VydmVyIENvbm5lY3Rpb24gKHV0ZjgpJ30gPSAnQ29uZXhpb24gZGVsIHNlcnZpZG9yICh1dGY4KSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayB0aGUgdXRmOCBzZXJ2ZXIgY29ubmVjdGlvbi4nfSA9ICdWZXJpZmljYSBsYSBjb25leGlvbiB1dGY4IGRlbCBzZXJ2aWRvcic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTm8gY2xpZW50X2VuY29kaW5nIGZvdW5kLid9ID0gJ05vIHNlIGVuY29udHJvIGNsaWVudF9lbmNvZGluZyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyJTZXR0aW5nIGNsaWVudF9lbmNvZGluZyBmb3VuZCwgYnV0IGl0J3Mgc2V0IHRvIn0gPSAnU2UgZW5jb250cm8gY2xpZW50X2VuY29kaW5nLCBwZXJvIGNvbiB2YWxvciBkZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDbGllbnQgQ29ubmVjdGlvbiAodXRmOCknfSA9ICdDb25leGnDs24gZGVsIGNsaWVudGUgKHV0ZjgpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIHRoZSB1dGY4IGNsaWVudCBjb25uZWN0aW9uLid9ID0gJ1ZlcmlmaWNhIGxhIGNvbmV4aW9uIHV0ZjggZGVsIGNsaWVudGUuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBQb3N0Z3JlU1FMIHZlcnNpb24gZm91bmQuJ30gPSAnTm8gc2UgZW5jb250cm8gdmVyc2lvbiBkZSBQb3N0Z3JlU1FMJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdSB1c2UgUG9zdGdyZVNRTCB2ZXJzaW9uJ30gPSAnU2UgZXN0YSB1dGlsaXphbmRvIFBvc3RncmVTUUwgdmVyc2lvbic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyd5b3Ugc2hvdWxkIHVzZSA4Lnggb3IgaGlnbmVyLid9ID0gJ2RlYmUgdXNhciA4LnggbyBzdXBlcmlvcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydVbmtub3duIFBvc3RncmVTUUwgdmVyc2lvbid9ID0gJ1ZlcnNpw7NuIGRlc2Nvbm9jaWRhIGRlIFBvc3RncmVTUUwnOwoKICAgICMgTVNTUUwKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvdWxkIG5vdCBkZXRlcm1pbmUgTWljcm9zb2Z0IFNRTCBTZXJ2ZXIgdmVyc2lvbi4nfSA9ICdObyBoYSBzaWRvIHBvc2libGUgZGV0ZXJtaW5hciB1bmEgdmVyc2nDs24gcGFyYSBNaWNyb3NvZnQgU1FMIFNlcnZlcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydpcyd9ID0gJ2VzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J2xhcmdlLCBvZiB3aGljaCd9ID0gJ2RlIHRhbWHDsW8sIGRlbCBjdWFsJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J2lzIGF2YWlsYWJsZS4nfSA9ICdzZSBlbmN1ZW50cmEgZGlzcG9uaWJsZS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2l6ZSd9ID0gJ1RhbWHDsW8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgZGF0YWJhc2Ugc2l6ZS4nfSA9ICdWZXJpZmljYSBlbCB0YW1hw7FvIGRlIGxhIGJhc2UgZGUgZGF0b3MuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb3VsZCBub3QgZGV0ZXJtaW5lIGRhdGFiYXNlIGhvc3RuYW1lLid9ID0gJ05vIGZ1ZSBwb3NpYmxlIGRldGVybWluYXIgbm9tYnJlIGRlbCBhbmZpdHJpw7NuIHBhcmEgbGEgYmFzZSBkZSBkYXRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGF0YWJhc2VIb3N0J30gPSAnQW5maXRyacOzbiBwYXJhIGxhIGJhc2UgZGUgZGF0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSG9zdG5hbWUnfSA9ICdOb21icmUgZGVsIGFuZml0cmnDs24nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgZGF0YWJhc2UgaG9zdG5hbWUuJ30gPSAnVmVyaWZpY2EgZWwgbm9tYnJlIGRlbCBhbmZpdHJpw7NuIHBhcmEgbGEgYmFzZSBkZSBkYXRvcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyJUYWJsZSBkb2Vzbid0IGV4aXN0In0gPSAnTm8gZXhpc3RlIGxhIHRhYmxhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3RhYmxlcyd9ID0gJ3RhYmxhcyc7CgogICAgIyBkYjIKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57IkNhbid0IGZpbmQgZmlsZSJ9ID0gJ05vIGhhIHNpZG8gcG9zaWJsZSBlbmNvbnRyYXIgZWwgYXJjaGl2byc7CgogICAgIyBPcmFjbGUKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05vIE9SQUNMRV9IT01FIHNldHRpbmcgZm91bmQuJ30gPSAnTGEgY29uZmlndXJhY2nDs24gT1JBQ0xFX0hPTUUgbm8gZnVlIGVuY29udHJhZGEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiT1JBQ0xFX0hPTUUgZG9uJ3QgZXhpc3RzIn0gPSAnTm8gZXhpc3RlIE9SQUNMRV9IT01FJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdXIgT1JBQ0xFX0hvbWUgY29uZmlndXJhdGlvbiBpcyd9ID0gJ0xhIGNvbmZpZ3VyYWNpw7NuIHBhcmEgT1JBQ0xFX0hPTUUgZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT1JBQ0xFX0hPTUUnfSA9ICdPUkFDTEVfSE9NRSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBPUkFDTEVfSE9NRSBjb25maWd1cmF0aW9uLid9ID0gJ1ZlcmlmaWNhIGxhIGNvbmZpZ3VyYWNpw7NuIHBhcmEgT1JBQ0xFX0hPTUUuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBOTFNfTEFORyBjb25maWd1cmF0aW9uIGZvdW5kLid9ID0gJ0xhIGNvbmZpZ3VyYWNpw7NuIE5MU19MQU5HIG5vIGZ1ZSBlbmNvbnRyYWRhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J25lZWQgLnV0ZjggaW4gTkxTX0xBTkcgKGUuIGcuIGdlcm1hbl9nZXJtYW55LnV0ZjgpLid9ID0gJ25lY2VzaXRhIC51dGY4IGVuIE5MU19MQU5HIChlai4gZ2VybWFuX2dlcm1hbnkudXRmOCkuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdXIgTkxTX0xBTkcgY29uZmlndXJhdGlvbiBpcyd9ID0gJ0xhIGNvbmZpZ3VyYWNpw7NuIHBhcmEgTkxTX0xBTkcgZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgTkxTX0xBTkcuJ30gPSAnVmVyaWZpY2EgTkxTX0xBTkcnOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05vIE5MU19EQVRFX0ZPUk1BVCBzZXR0aW5nIGZvdW5kLid9ID0gJ0xhIGNvbmZpZ3VyYWNpw7NuIE5MU19EQVRFX0ZPUk1BVCBubyBmdWUgZW5jb250cmFkYS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiTmVlZCBmb3JtYXQgJ1lZWVktTU0tREQgSEgyNDpNSTpTUycgZm9yIE5MU19EQVRFX0ZPUk1BVCAobm90In0gPSAiRXMgbmVjZXNhcmlvIGVsIGZvcm1hdG8gJ1lZWVktTU0tREQgSEgyNDpNSTpTUycgcGFyYSBOTFNfREFURV9GT1JNQVQgKG5vIjsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdXIgTkxTX0RBVEVfRk9STUFUIHNldHRpbmcgaXMnfSA9ICdMYSBjb25maWd1cmFjacOzbiBwYXJhIE5MU19EQVRFX0ZPUk1BVCBlcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBOTFNfREFURV9GT1JNQVQuJ30gPSAnVmVyaWZpY2EgTkxTX0RBVEVfRk9STUFUJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05MU19EQVRFX0ZPUk1BVCBzZWVtcyB0byBiZSB3cm9uZyd9ID0gJ0VsIHZhbG9yIHBhcmEgTkxTX0RBVEVfRk9STUFUIHBhcmVjZSBzZXIgaW5jb3JyZWN0byc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyJpcyBub3QgdGhlIHJpZ2h0IGZvcm1hdCAneXl5eS1tbS1kZCBoaDptbTo6c3MnIChwbGVhc2UgY2hlY2sifSA9ICJubyBlcyBlbCBmb3JtYXRvIGNvcnJlY3RvICd5eXl5LW1tLWRkIGhoOm1tOjpzcycgKHBvciBmYXZvciB2ZXJpZmlxdWUiOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTkxTX0RBVEVfRm9ybWF0IGhhcyB0aGUgcmlnaHQgZm9ybWF0J30gPSAnTkxTX0RBVEVfRm9ybWF0IHRpZW5lIGVsIGZvcm1hdG8gY29ycmVjdG8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgTkxTX0RBVEVfRk9STUFUIGJ5IHVzaW5nIFNFTEVDVCBzdGF0ZW1lbnQuJ30gPSAnVmVyaWZpY2EgTkxTX0RBVEVfRm9ybWF0IG1laWRhbnRlIGVsIHVzbyBkZSB1bmEgY29uc3VsdGEgU0VMRUNUJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57IlRhYmxlIGRvbid0IGV4aXN0cyJ9ID0gJ0xhIHRhYmxhIG5vIGV4aXN0ZSc7CgogICAgIyB3ZWJzZXJ2ZXIKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dlYnNlcnZlcid9ID0gJ1NlcnZpZG9yIHdlYic7CgogICAgIyBhcGFjaGUKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdSBhcmUgcnVubmluZyd9ID0gJ1NlIGVuY3VlbnRyYSBlamVjdXRhbmRvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvdWxkIG5vdCBkZXRlcm1pbmUgQXBhY2hlIHZlcnNpb24uJ30gPSAnTm8gaGEgc2lkbyBwb3NpYmxlIGRldGVybWluYXIgbGEgdmVyc2nDs24gZGUgQXBhY2hlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FwYWNoZSBWZXJzaW9uJ30gPSAnVmVyc2nDs24gZGUgQXBhY2hlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0Rpc3BsYXkgd2ViIHNlcnZlciB2ZXJzaW9uLid9ID0gJ011ZXN0cmEgbGEgdmVyc2nDs24gZGVsIHNlcnZpZG9yIHdlYic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQXBhY2hlOjpEQkkgc2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGEgYmV0dGVyIHBlcmZvcm1hbmNlIChwcmUtZXN0YWJsaXNoIGRhdGFiYXNlIGNvbm5lY3Rpb25zKS4nfSA9ICdBcGFjaGU6OkRCSSBkZWJlIHNlciB1c2FkbyBwYXJhIG9idGVuZXIgdW4gbWVqb3IgcmVuZGltaWVudG8gKGNvbmV4aW9uZXMgcHJlLWVzdGFibGVjaWRhcyBhIGJhc2UgZGUgZGF0b3MpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGlmIHRoZSBzeXN0ZW0gdXNlcyBBcGFjaGU6OkRCSS4nfSA9ICdWZXJpZmljYSBzaSBlbCBzaXN0ZW1hIHV0aWxpemEgQXBhY2hlOjpEQkknOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FwYWNoZTo6UmVsb2FkIG9yIEFwYWNoZTI6OlJlbG9hZCBzaG91bGQgYmUgdXNlZCBhcyBQZXJsTW9kdWxlIGFuZCBQZXJsSW5pdEhhbmRsZXIgdG8gcHJldmVudCB3ZWIgc2VydmVyIHJlc3RhcnRzIHdoZW4gaW5zdGFsbGluZyBhbmQgdXBncmFkaW5nIG1vZHVsZXMuJ30gPSAnQXBhY2hlOjpSZWxvYWQgb3IgQXBhY2hlMjo6UmVsb2FkIGRlYmVuIHNlciB1c2Fkb3MgY29tbyBQZXJsTW9kdWxlIHkgUGVybEluaXRIYW5kbGVyIHBhcmEgcHJldmVuaXIgZWwgcmVpbmljaW8gZGVsIHNlcnZpZG9yIGFsIG1vbWVudG8gZGUgaW5zdGFsYXIgbyBhY3R1YWxpemFyIG1vZHVsb3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgdGhlIHN5c3RlbSB1c2VzIEFwYWNoZTo6UmVsb2FkL0FwYWNoZTI6OlJlbG9hZC4nfSA9ICdWZXJpZmljYSBzaSBlbCBzaXN0ZW1hIHV0bGl6YSBBcGFjaGU6OlJlbG9hZC9BcGFjaGUyOjpSZWxvYWQuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3UgdXNlIGEgYmV0YSB2ZXJzaW9uIG9mIG1vZF9wZXJsJ30gPSAnU2UgZW5jdWVudHJhIHV0aWxpemFuZG8gdW5hIHZlcnNpb24gcHJlZWxpbWluYXIgZGUgbW9kX3BlcmwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsneW91IHNob3VsZCB1cGdyYWRlIHRvIGEgc3RhYmxlIHZlcnNpb24uJ30gPSAnRGViZSBhY3R1YWxpemFyIGEgdW5hIHZlcnNpw7NuIGVzdGFibGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91IHNob3VsZCB1cGRhdGUgbW9kX3BlcmwgdG8nfSA9ICdEZWJlIGFjdHVhbGl6YXIgbW9kX3BlcmwgYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3UgYXJlIHVzaW5nIEZhc3RDR0kuJ30gPSAnRmFzdENHSSBzZSBlc3TDoSB1dGlsaXphbmRvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdSBzaG91bGQgdXNlIEZhc3RDR0kgb3IgbW9kX3BlcmwgdG8gaW5jcmVhc2UgeW91ciBwZXJmb3JtYW5jZS4nfSA9ICdEZWJlIHVzYXIgRmFzdENHSSBvIG1vZF9wZXJsIHBhcmEgaW5jcmVtZW50YXIgZWwgcmVuZGltaWVudG8uJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NHSSBBY2NlbGVyYXRvcid9ID0gJ0FjZWxlcmFkb3IgQ0dJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGZvciBDR0kgQWNjZWxlcmF0b3IuJ30gPSAnVmVyaWZpY2EgdW4gYWNlbGVyYWRvciBDR0knOwoKICAgICMgSUlTCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQZXJsRXggaXMgaW4gdXNlJ30gPSAnUGVybEV4IHNlIGVuY3VlbnRyYSBlbiB1c28nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91IHNob3VsZCB1c2UgUGVybEV4IHRvIGluY3JlYXNlIHlvdXIgcGVyZm9ybWFuY2UuJ30gPSAnRGViZSB1c2FyIFBlcmxFeCBwYXJhIGluY3JlbWVudGFyIGVsIGRlc2VtcGXDsW8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgUGVybEV4IGlzIHVzZWQuJ30gPSAnVmVyaWZpY2Egc2kgUGVybEV4IGVzdGEgZW4gdXNvJzsKCiAgICAjIG9zCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydPUyd9ID0gJ1Npc3RlbWEgb3BlcmF0aXZvJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEaXN0cmlidXRpb24nfSA9ICdEaXN0cmlidWNpw7NuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIHRoZSB1c2VkIGRpc3RyaWJ1dGlvbi4nfSA9ICdNdWVzdHJhIGxhIGRpc3RyaWJ1Y2nDs24gdXNhZGEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnaXMgdXNlZC4nfSA9ICdlc3RhIGVuIHVzby4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGlzdHJpYnV0aW9uIHVua25vd24uJ30gPSAnRGlzdHJpYnVjacOzbiBkZXNjb25vY2lkYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDYW5cJ3QgZGV0ZXJtaW5lIGRpc3RyaWJ1dGlvbi4nfSA9ICdObyBlcyBwb3NpYmxlIGRldGVybWluYXIgbGEgZGlzdHJpYnVjacOzbic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnS2VybmVsIFZlcnNpb24nfSA9ICdWZXJzacOzbiBkZSBLZXJuZWwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgdGhlIHVzZWQgS2VybmVsIHZlcnNpb24uJ30gPSAnTXVlc3RyYSBsYSB2ZXJzacOzbiBkZWwgS2VybmVsIGVuIHVzbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDYW5cJ3QgZXhlY3V0ZSB1bmFtZSAtYS4uLid9ID0gJ05vIGVzIHBvc2libGUgZWplY3V0YXIgdW5hbWUgLWEuLi4nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BlcmxDaGVjayd9ID0gJ1ZlcmlmaWNhY2nDs24gUGVybCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBQZXJsIHZlcnNpb24uJ30gPSAnVmVyaWZpY2EgbGEgdmVyc2nDs24gZGUgUGVybCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3VyIFBlcmwnfSA9ICdMYSB2ZXJzacOzbiBkZSBQZXJsJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J2lzIHRvbyBvbGQsIHlvdSBzaG91bGQgdXBncmFkZSB0byBQZXJsIDUuOC44IG9yIGhpZ2hlci4nfSA9ICdlcyBtdXkgYW50aWfDvGEsIGRlYmUgYWN0dWFsaXphciBhIFBlcmwgNS44LjggbyBzdXBlcmlvcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydVbmFibGUgdG8gcGFyc2UgdmVyc2lvbiBzdHJpbmcnfSA9ICdObyBlcyBwb3NpYmxlIGFuYWxpemFyIGxhIGNhZGVuYSBkZSB2ZXJzacOzbic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGVybE1vZHVsZXNDaGVjayd9ID0gJ1ZlcmlmaWNhY2nDs24gZGUgbG9zIG3Ds2R1bG9zIFBlcmwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgUGVybCBNb2R1bGVzIGluc3RhbGxlZC4nfSA9ICdWZXJpZmljYWNpw7NuIG3Ds2R1bG9zIFBlcmwgaW5zdGFsYWRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlcmUgaXMgYW4gZXJyb3IgaW4geW91ciBpbnN0YWxsZWQgcGVybCBtb2R1bGVzIGNvbmZpZ3VyYXRpb24uIFBsZWFzZSBjb250YWN0IHlvdXIgYWRtaW5pc3RyYXRvci4nfSA9ICdFeGlzdGUgdW4gZXJyb3IgZW4gbGEgY29uZmlndXJhY2nDs24gZGUgbG9zIG3Ds2R1bG9zIFBlcmwgaW5zdGFsYWRvcy4gUG9yIGZhdm9yIGNvbnRhY3RlIGEgc3UgYWRtaW5pc3RyYWRvci4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQWxsIFBlcmwgbW9kdWxlcyBuZWVkZWQgYXJlIGN1cnJlbnRseSBpbnN0YWxsZWQuJ30gPSAnVG9kb3MgbG9zIG1vZHVsb3MgUGVybCBuZWNlc2FyaW9zIHNlIGVuY3VlbnRyYW4gaW5zdGFsYWRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVW5hYmxlIHRvIGNoZWNrIFBlcmwgbW9kdWxlcy4nfSA9ICdObyBlcyBwb3NpYmxlIHZlcmlmaWNhciBtb2R1bG9zIFBlcmwnOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBIb3N0IFN5c3RlbSBoYXMnfSA9ICdFbCBzaXN0ZW1hIGFuZml0cmnDs24gdGllbmUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTUIgTWVtb3J5IHRvdGFsJ30gPSAnTUIgbWVtb3JpYSB0b3RhbCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNQiBNZW1vcnkgZnJlZSd9ID0gJ01CIG1lbW9yaWEgbGlicmUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTUIgU3dhcCB0b3RhbCd9ID0gJ01CIHN3YXAgdG90YWwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTUIgU3dhcCBmcmVlJ30gPSAnTUIgc3dhcCBsaWJyZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNZW1vcnkgU3dhcCBDaGVjayd9ID0gJ1ZlcmlmaWNhIGxhIG1lbW9yaWEgZGUgaW50ZXJjYW1iaW8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQSBNZW1vcnkgQ2hlY2suIFdlIHRyeSB0byBmaW5kIG91dCBpZiBTd2FwRnJlZSA6IFN3YXBUb3RhbCA8IDYwICUgb3IgaWYgbW9yZSB0aGFuIDIwMCBNQiBTd2FwIGlzIHVzZWQuJ30gPSAnVW5hIHZlcmlmaWNhY2nDs24gZGUgbWVtb3JpYS4gU2UgdHJhdGEgZGUgZW5jb250cmFyIHNpIGxhIG1lbW9yaWEgZGUgaW50ZXJjYW1pYm8gbGlicmUgZXMgbWVub3IgYWwgNjAlIGRlbCB0b3RhbCBvIHNpIG1hcyBkZSAyMDAgTUIgZGUgbWVtb3JpYSBkZSBpbnRlcmNhbWJpbyBlc3RhbiBlbiB1c28uJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05vIFN3YXAgZW5hYmxlZCEnfSA9ICchTm8gaGF5IG1lbW9yaWEgZGUgaW50ZXJjYW1iaW8gaGFiaWxpdGFkYSEnOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBIb3N0IFN5c3RlbSBoYXMgYSBsb2FkJ30gPSAnRWwgc2lzdGVtYSBhbmZpdHJpw7NuIGhhIGNhcmdhZG8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnaW4gdGhlIGxhc3QgMSBtaW51dGUnfSA9ICdlbiBlbCB1bHRpbW8gbWludXRvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J2luIHRoZSBsYXN0IDUgbWludXRlcyd9ID0gJ2VuIGxvcyDDumx0aW1vcyA1IG1pbnV0b3MnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnaW4gdGhlIGxhc3QgMTUgbWludXRlcyd9ID0gJ2VuIGxvcyDDumx0aW1vcyAxNSBtaW51dG9zJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NQVSBMb2FkJ30gPSAnQ2FyZ2EgZGUgbGEgVUNQJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0EgQ1BVIGxvYWQgY2hlY2suIFdlIHRyeSB0byBmaW5kIG91dCBpZiB0aGUgc3lzdGVtIGxvYWQgaW4gdGhlIGxhc3QgMTUgbWludXRlcyA+IDEuJ30gPSAnVmVyaWZpY2FjacOzbiBkZSBsYSBjYXJnYSBkZSBVQ1AuIFNlIGludGVudGEgdmVyaWZpY2FyIHNpIGVsIHNpc3RlbWEgaGEgY2FyZ2FkbyBlbiBsb3MgdWx0aW1vcyAxNSBtaW51dG9zIG1hcyBkZSAxIHZleic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBIENQVSBsb2FkIGNoZWNrLiBXZSB0cnkgdG8gZmluZCBvdXQgaWYgdGhlIHN5c3RlbSBsb2FkIGluIHRoZSBsYXN0IDE1IG1pbnV0ZXMgPiAxLid9ID0gJ1ZlcmlmaWNhY2nDs24gZGUgbGEgY2FyZ2EgZGUgVUNQLiBTZSBpbnRlbnRhIHZlcmlmaWNhciBzaSBlbCBzaXN0ZW1hIGhhIGNhcmdhZG8gZW4gbG9zIHVsdGltb3MgMTUgbWludXRvcyBtZW5vcyBkZSAxIHZleic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGlzayBpcyBmdWxsJ30gPSAnRGlzY28gbGxlbm8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGlzayB1c2FnZSd9ID0gJ1VzbyBkZSBkaXNjbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBkaXNrIHVzYWdlLid9ID0gJ1ZlcmlmaWNhIHVzbyBkZSBkaXNjbyc7CgogICAgIyBPVFJTCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3UgaGF2ZSBtb3JlIGVycm9yIGxvZyBlbnRyaWVzOiAnfSA9ICdTZSB0aWVuZW4gbWFzIGVudHJhZGFzIGRlIGVycm9yJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZXJlIGlzIG9uZSBlcnJvciBsb2cgZW50cnk6ICd9ID0gJ0hheSB1bmEgZW50cmFkYSBkZSBlcnJvcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydMb2dDaGVjayd9ID0gJ1ZlcmlmaWNhY2nDs24gZGUgYml0YWNvcmEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgbG9nIGZvciBlcnJvciBsb2cgZW50cmllcy4nfSA9ICdWZXJpZmljYSBsYSBiaXRhY29yYSBwYXJhIGVudHJhZGFzIGRlIGVycm9yLic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsndGlja2V0cyBpbiB5b3VyIHN5c3RlbS4gWW91IHNob3VsZCB1c2UgdGhlIFN0YXRpY0RCIGJhY2tlbmQuIFNlZSBhZG1pbiBtYW51YWwgKFBlcmZvcm1hbmNlIFR1bmluZykgZm9yIG1vcmUgaW5mb3JtYXRpb24uJ30gPQogICAgICAgICd0aWNrZXQgZW4gZWwgc2lzdGVtYS4gU2UgZGViZSB1c2FyIGVsIG1vZHVsbyBTdGF0aWNEQi4gVmVhIGVsIG1hbnVhbCBkZSBhZG1pbmlzdHJhY2nDs24gKEFqdXN0ZXMgZGUgcmVuZGltaWVudG8pIHBhcmEgbWFzIGluZm9ybWFjacOzbic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3UgYXJlIHVzaW5nJ30gPSAnU2UgZXN0YSB1c2FuZG8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsidGhhdCdzIGZpbmUgZm9yIn0gPSAnZXMgY29ycmVjdG8gcGFyYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eyd0aWNrZXRzIGluIHlvdXIgc3lzdGVtLid9ID0gJ3RpY2tldHMgZW4gZWwgc2lzdGVtYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBUaWNrZXQ6OkluZGV4TW9kdWxlIHNldHRpbmcuJ30gPSAnVmVyaWZpY2EgbGEgY29uZmlndXJhY2nDs24gVGlja2V0OjpJbmRleE1vZHVsZS4nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3RpY2tldHMgaW4gU3RhdGljREIgbG9ja19pbmRleCBidXQgeW91IGFyZSB1c2luZyB0aGUnfSA9ICd0aWNrZXRzIGVuIFN0YXRpY0RCIGxvY2tfaW5kZXggcGVybyBzZSBlc3RhIHVzYW5kbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydpbmRleC4gUGxlYXNlIHJ1biBvdHJzL2Jpbi9vdHJzLkNsZWFuVGlja2V0SW5kZXgucGwgdG8gY2xlYW4gdGhlIFN0YXRpY0RCIGluZGV4Lid9ID0gJ2luZGljZS4gUG9yIGZhdm9yIGVqZWN1dGUgb3Rycy9iaW4vb3Rycy5DbGVhblRpY2tldEluZGV4LnBsIHBhcmEgbGltcGlhciBlbCBpbmRpY2UgU3RhdGljREInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsndGlja2V0cyBpbiBTdGF0aWNEQiBpbmRleCBidXQgeW91IGFyZSB1c2luZyB0aGUnfSA9ICd0aWNrZXRzIGVuIGVsIGluZGljZSBTdGF0aWNEQiBwZXJvIHNlIGVzdGEgdXNhbmRvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NraXBwaW5nIHRlc3QuJ30gPSAnT21pdGllbmRvIHJldmlzacOzbic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydObyBvcnBoYW5lZCByZWNvcmRzIGZvdW5kLid9ID0gJ05vIHNlIGVuY29udHJhcm9uIGVudHJhZGFzIGh1ZXJmYW5hcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaWNrZXRTdGF0aWNEQk9ycGhhbmVkUmVjb3Jkcyd9ID0gJ1RpY2tldFN0YXRpY0RCT3JwaGFuZWRSZWNvcmRzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIG9ycGhhbmVkIFN0YXRpY0RCIHJlY29yZHMuJ30gPSAnVmVyaWZpY2EgZW50cmFkYXMgaHVlcmZhbmFzIGVuIFN0YXRpY0RCJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydhcnRpY2xlcyBpbiB5b3VyIHN5c3RlbS4gWW91IHNob3VsZCB1c2UgdGhlIFN0YXRpY0RCIGJhY2tlbmQgZm9yIE9UUlMgMi4zIGFuZCBoaWdoZXIuIFNlZSBhZG1pbiBtYW51YWwgKFBlcmZvcm1hbmNlIFR1bmluZykgZm9yIG1vcmUgaW5mb3JtYXRpb24uJ30gPQogICAgICAgICdhcnRpY3Vsb3MgZW4gZWwgc2lzdGVtYS4gRGViZSB1dGlsaXphciBlbCBtb2R1bG8gU3RhdGljREIgcGFyYSBPVFJTIDIuMyB5IHN1cGVyaW9yLiBWZWEgZWwgbWFudWFsIGRlIGFkbWluaXN0cmFjacOzbiAoQWp1c3RlcyBkZSByZW5kaW1pZW50bykgcGFyYSBtYXMgaW5mb3JtYWNpw7NuLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydhcnRpY2xlcyBpbiB5b3VyIHN5c3RlbS4nfSA9ICdhcnRpY3Vsb3MgZW4gZWwgc2lzdGVtYS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgVGlja2V0OjpTZWFyY2hJbmRleE1vZHVsZSBzZXR0aW5nLid9ID0gJ1ZlcmlmaWNhIGxhIGNvbmZpZ3VyYWNpw7NuIFRpY2tldDo6U2VhcmNoSW5kZXhNb2R1bGUuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3Ugc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiA4MDAwIG9wZW4gdGlja2V0cyBpbiB5b3VyIHN5c3RlbS4gWW91IGN1cnJlbnRseSBoYXZlIG92ZXIgODk5OTkhIEluIGNhc2UgeW91IHdhbnQgdG8gaW1wcm92ZSB5b3VyIHBlcmZvcm1hbmNlLCBjbG9zZSBub3QgbmVlZGVkIG9wZW4gdGlja2V0cy4nfSA9CiAgICAgICAgJ05vIGRlYmUgdGVuZXIgbWFzIGRlIDgwMDAgdGlja2V0cyBhYmllcnRvcyBlbiBlbCBzaXN0ZW1hLiBTZSBjdWVudGEgYWN0dWFsbWVudGUgY29uIG1hcyBkZSA4OTk5OSEgRW4gY2FzbyBkZSBxdWUgcXVpZXJhIG1lam9yYXIgZWwgcmVuZGltaWVudG8gZGVsIHNpc3RlbWEsIGNpZXJyZSBsb3MgdGlja2V0cyBxdWUgbm8gc2UgbmVjZXNpdGVuLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydZb3Ugc2hvdWxkIG5vdCBoYXZlIG92ZXIgODAwMCBvcGVuIHRpY2tldHMgaW4geW91ciBzeXN0ZW0uIFlvdSBjdXJyZW50bHkgaGF2ZSAnfSA9ICdObyBkZWJlIHRlbmVyIGFycmliYSBkZSA4MDAwIHRpY2tldHMgYWJpZXJ0b3MgZW4gZWwgc2lzdGVtYS4gVXN0ZWQgYWN0dWFsbWVudGUgdGllbmUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW4gY2FzZSB5b3Ugd2FudCB0byBpbXByb3ZlIHlvdXIgcGVyZm9ybWFuY2UsIGNsb3NlIG5vdCBuZWVkZWQgb3BlbiB0aWNrZXRzLid9ID0gJ0VuIGNhc28gZGUgcXVlIHF1aWVyYSBtZWpvcmFyIGVsIHJlbmRpbWllbnRvLCBjaWVycmUgbG9zIHRpY2tldHMgcXVlIG5vIHNlIG5lY2VzaXRlbi4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91IHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gODAwMCBvcGVuIHRpY2tldHMgaW4geW91ciBzeXN0ZW0uIFlvdSBjdXJyZW50bHkgaGF2ZSAnfSA9ICdObyBkZWJlIHRlbmVyIG1hcyBkZSA4MDAwIHRpY2tldHMgYWJpZXJ0b3MgZW4gZWwgc2lzdGVtYS4gVXN0ZWQgYWN0dWFsbWVudGUgdGllbmUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91IGhhdmUgJ30gPSAnU2UgdGllbmVuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57JyBvcGVuIHRpY2tldHMgaW4geW91ciBzeXN0ZW0uJ30gPSAnIHRpY2tldHMgYWJpZXJ0b3MgZW4gZWwgc2lzdGVtYS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3BlblRpY2tldENoZWNrJ30gPSAnT3BlblRpY2tldENoZWNrJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIG9wZW4gdGlja2V0cyBpbiB5b3VyIHN5c3RlbS4nfSA9ICdWZXJpZmljYSB0aWNrZXRzIGFiaWVydG9zIGVuIGVsIHNpc3RlbWEuJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGUUROQ29uZmlnQ2hlY2snfSA9ICdGUUROQ29uZmlnQ2hlY2snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgdGhlIGNvbmZpZ3VyZWQgRlFETiBpcyB2YWxpZC4nfSA9ICdWZXJpZmljYSBzaSBlbCBGUUROIGNvbmZpZ3VyYWRvIGVzIHZhbGlkby4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGxlYXNlIGNvbmZpZ3VyZSB5b3VyIEZRRE4gaW5zaWRlIHRoZSBTeXNDb25maWcgbW9kdWxlLiAoY3VycmVudGx5IHRoZSBkZWZhdWx0IHNldHRpbmcnfSA9ICdQb3IgZmF2b3IgY29uZmlndXJlIHN1IEZRRE4gZGVudHJvIGRlbCBtb2R1bG8gZGUgY29uZmlndXJhY2nDs24uIChhY3R1YWxtZW50ZSBlbCB2YWxvciBwb3Igb21pc2lvbiBlcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydpcyBlbmFibGVkKS4nfSA9ICdzZSBlbmN1ZW50cmEgaGFiaWxpdGFkby4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW52YWxpZCBGUUROJ30gPSAnRlFETiBpbnZhbGlkby4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnbG9va3MgZ29vZC4nfSA9ICdsdWNlIGJpZW4uJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTeXN0ZW1JRENvbmZpZ0NoZWNrJ30gPSAnU3lzdGVtSURDb25maWdDaGVjayc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBpZiB0aGUgY29uZmlndXJlZCBTeXN0ZW1JRCBjb250YWlucyBvbmx5IGRpZ2l0cy4nfSA9ICdWZXJpZmljYSBzaSBlbCBTeXN0ZW1JRCBjb25maWd1cmFkbyBlbiBlbCBzaXN0ZW1hIGNvbnRpZW5lIHNvbG8gZGlnaXRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnWW91ciBTeXN0ZW1JRCBzZXR0aW5nIGlzJ30gPSAnRWwgU3lzdGVtSUQgZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIFN5c3RlbUlEJ30gPSAnRWwgU3lzdGVtSUQnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnbXVzdCBjb25zaXN0IG9mIGRpZ2l0cyBleGNsdXNpdmVseS4nfSA9ICdkZWJlIGNvbnNpc3RpciBkZSBkaWdpdG9zIGV4Y2x1c2l2YW1lbnRlLic7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVzcG9uc2VGb3JtYXRDaGVjayd9ID0gJ1Jlc3BvbnNlRm9ybWF0Q2hlY2snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgVGlja2V0OjpGcm9udGVuZDo6UmVzcG9uc2VGb3JtYXQgY29udGFpbnMgbm8gJERhdGF7IiJ9Lid9ID0gJ1ZlcmlmaWNhIHNpIFRpY2tldDo6RnJvbnRlbmQ6OlJlc3BvbnNlRm9ybWF0IG5vIGNvbnRpZW5lICREYXRheyIifS4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnd2FzIG5vdCBmb3VuZC4nfSA9ICdubyBmdWUgZW5jb250cmFkby4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIG9wdGlvbiBUaWNrZXQ6OkZyb250ZW5kOjpSZXNwb25zZUZvcm1hdCBjb2ludGFpbnMnfSA9ICdMYSBvcGNpw7NuIGRlIGNvbmZpZ3VyYWNpw7NuIFRpY2tldDo6RnJvbnRlbmQ6OlJlc3BvbnNlRm9ybWF0IGNvbnRpZW5lJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J3Nob3VsZCBiZSB1c2VkIGluc3RhbmQgKHNlZSBkZWZhdWx0IHNldHRpbmcpLid9ID0gJ2RlYmUgc2VyIHVzYWRvIGVuIHN1IGx1Z2FyICh2ZXIgbGFzIG9wY2lvbmVzIGRlIGNvbmZpZ3VyYWNpw7NuKS4nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0ZpbGVTeXN0ZW1DaGVjayd9ID0gJ0ZpbGVTeXN0ZW1DaGVjayc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBpZiBmaWxlIHN5c3RlbSBpcyB3cml0YWJsZS4nfSA9ICdWZXJpZmljYSBzaSBlbCBzaXN0ZW1hIGRlIGFyY2hpdm9zIHRpZW5lIHBlcm1pc29zIGRlIGVzY3JpdHVyYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGUgZmlsZSBzeXN0ZW0gaXMgd3JpdGFibGUuJ30gPSAnRWwgc2lzdGVtYSBkZSBhcmNoaXZvcyB0aWVuZSBwZXJtaXNvcyBkZSBlc2NyaXR1cmEuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05vIHN1Y2ggaG9tZSBkaXJlY3RvcnknfSA9ICdObyBlcyBlbCBkaXJlY3RvcmlvIGluaWNpYWwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsiQ2FuJ3Qgd3JpdGUgZmlsZSJ9ID0gJ05vIHNlIHB1ZWRlIGVzY3JpYmlyIGVuIGFyY2hpdm8nOwoKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BhY2thZ2VEZXBsb3lDaGVjayd9ID0gJ1BhY2thZ2VEZXBsb3lDaGVjayc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGVjayBkZXBsb3ltZW50IG9mIGFsbCBwYWNrYWdlcy4nfSA9ICdWZXJpZmljYSBsYSBjb25zaXN0ZW5jaWEgZGUgdG9kb3MgbG9zIHBhcXVldGVzLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBbGwgcGFja2FnZXMgYXJlIGNvcnJlY3RseSBpbnN0YWxsZWQuJ30gPSAnVG9kb3MgbG9zIHBhcXVldGVzIGVzdGFuIGNvcnJlY3RhbWVudGUgaW5zdGFsYWRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGFja2FnZXMgbm90IGNvcnJlY3RseSBpbnN0YWxsZWQnfSA9ICdQYXF1ZXRlcyBpbmNvcnJlY3RhbWVudGUgaW5zdGFsYWRvcyc7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW52YWxpZFVzZXJMb2NrZWRUaWNrZXRTZWFyY2gnfSA9ICdJbnZhbGlkVXNlckxvY2tlZFRpY2tldFNlYXJjaCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZWFyY2ggZm9yIGludmFsaWQgdXNlciB3aXRoIGxvY2tlZCB0aWNrZXRzLid9ID0gJ0J1c2NhIHVzdWFyaW9zIGludmFsaWRvcyBjb24gdGlja2V0cyBibG9xdWVhZG9zLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGVyZSBhcmUgbm8gaW52YWxpZCB1c2VycyB3aXRoIGxvY2tlZCB0aWNrZXRzLid9ID0gJ05vIGhheSB1c3VhcmlvcyBpbnZhbGlkb3MgY29uIHRpY2tldHMgYmxvcXVlYWRvcy4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlc2UgaW52YWxpZCB1c2VycyBoYXZlIGxvY2tlZCB0aWNrZXRzJ30gPSAnRXN0b3MgdXN1YXJpb3MgaW52YWxpZG9zIHRpZW5lbiB0aWNrZXQgYmxvcXVlYWRvcyc7CgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmYXVsdFVzZXJDaGVjayd9ID0gJ0RlZmF1bHRVc2VyQ2hlY2snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgaWYgcm9vdEBsb2NhbGhvc3QgYWNjb3VudCBoYXMgdGhlIGRlZmF1bHQgcGFzc3dvcmQuJ30gPSAnVmVyaWZpY2Egc2kgbGEgY3VlbnRhIHJvb3RAbG9jYWxob3N0IHRpZW5lIGxhIGNsYXZlIHBvciBvbWlzacOzbic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGVyZSBpcyBubyBhY3RpdmUgcm9vdEBsb2NhbGhvc3Qgd2l0aCBkZWZhdWx0IHBhc3N3b3JkLid9ID0gJ0xhIGN1ZW50YSByb290QGxvY2FsaG9zdCBvbiBlc3RhIGFjdGl2YSBjb24gbGEgY2xhdmUgcG9yIG9taXNpw7NuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57IkNoYW5nZSB0aGUgcGFzc3dvcmQgb3IgaW52YWxpZGF0ZSB0aGUgYWNjb3VudCAncm9vdFxAbG9jYWxob3N0Jy4ifSA9ICdNb2RpZmlxdWUgbGEgY2xhdmUgbyBpbnZhbGlkZSBsYSBjdWVudGEgcm9vdFxAbG9jYWxob3N0JzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTT0FQQ2hlY2snfSA9ICdTT0FQQ2hlY2snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hlY2sgZGVmYXVsdCBTT0FQIGNyZWRlbnRpYWxzLid9ID0gJ1ZlcmlmaWNhIGxvcyBkYXRvcyBkZSAgYXV0ZW50aWZpY2FjacOzbiBwYXJhIFNPQVAuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1lvdSBoYXZlIG5vdCBlbmFibGVkIFNPQVAgb3IgaGF2ZSBzZXQgeW91ciBvd24gcGFzc3dvcmQuJ30gPSAnTm8gc2UgZW5jdWVudHJhIGhhYmlsaXRhZG8gU09BUCBvIGhhIHB1ZXN0byBzdSBwcm9waWEgY2xhdmUuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BsZWFzZSBzZXQgYSBzdHJvbmcgcGFzc3dvcmQgZm9yIFNPQVA6OlBhc3N3b3JkIGluIFN5c0NvbmZpZy4nfSA9ICdQb3IgZmF2b3IgaW5ncmVzZSB1bmEgY2xhdmUgc2VndXJhIHBhcmEgU09BUDo6UGFzc3dvcmQgZW4gbGEgY29uZmlndXJhY2nDs24uJzsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbnN0YWxsIGRpcmVjdG9yeSd9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQcm9kdWN0J30gPSAnUHJvZHVjdG8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGlja2V0cyd9ID0gJ1RpY2tldCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBcnRpY2xlcyd9ID0gJ0FydGljdWxvcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBZ2VudHMnfSA9ICdBZ2VudGVzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JvbGVzJ30gPSAnUm9sZXMnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnR3JvdXBzJ30gPSAnR3J1cG9zJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FydGljbGVzIHBlciB0aWNrZXQgKGF2ZyknfSA9ICdBcnRpY3Vsb3MgcG9yIHRpY2tldCAocHJvbWVkaW8pJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J09wZXJhdGluZyBzeXN0ZW0nfSA9ICdTaXN0ZW1hIE9wZXJhdGl2byc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNb250aHMgYmV0d2VlbiBmaXJzdCBhbmQgbGFzdCB0aWNrZXQnfSA9ICdNZXNlcyBlbnRyZSBlbCBwcmltZXIgeSB1bHRpbW8gdGlja2V0JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RpY2tldHMgcGVyIG1vbnRoIChhdmcpJ30gPSAnVGlja2V0IHBvciBtZXMgKHByb21lZGlvKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBdHRhY2htZW50cyBwZXIgdGlja2V0IChhdmcpJ30gPSAnUHJvbWVkaW8gZGUgYXJjaGl2b3MgYWRqdW50b3MgcG9yIHRpY2tldCAocHJvbWVkaW8pJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0F0dGFjaG1lbnQgc2l6ZSAoYXZnKSd9ID0gJ1RhbWHDsW8gZGUgYXJjaGl2byBhZGp1bnRvIChwcm9tZWRpbyknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnR2VuZXJhbFN5c3RlbU92ZXJ2aWV3J30gPSAnR2VuZXJhbFN5c3RlbU92ZXJ2aWV3JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0Rpc3BsYXkgYSBnZW5lcmFsIHN5c3RlbSBvdmVydmlldyd9ID0gJ011ZXN0cmEgdW5hIHZpc3RhIGdlbmVyYWwgZGUgc2lzdGVtYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydHZW5lcmFsIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgc3lzdGVtLid9ID0gJ0luZm9ybWFjacOzbiBnZW5lcmFsIGRlbCBzaXN0ZW1hLic7Cgp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AdminSupport.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupport.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupportLicenseText.dtl" Permission="644" Encode="Base64">IyAtLQojIEFkbWluU3VwcG9ydExpY2Vuc2VUZXh0LmR0bCAtIHByb3ZpZGVzIHRoZSBsaWNlbnNlIGRlZmluaXRpb24gZm9yIHRoZSBTdXBwb3J0CiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBBZG1pblN1cHBvcnRMaWNlbnNlVGV4dC5kdGwsdiAxLjIgMjAxMC8wOS8xMCAwNzo0NDo0MiBtZyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudERFIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGVuc2NodXR6CgpXaXIsIGRpZSBGaXJtYSBPVFJTIEFHLCBuZWhtZW4gZGVuIFNjaHV0eiBJaHJlciBwZXJzJm91bWw7bmxpY2hlbiBEYXRlbiBzZWhyIGVybnN0IHVuZCBoYWx0ZW4gdW5zIHN0cmlrdCBhbiBkaWUgUmVnZWxuIGRlciBEYXRlbnNjaHV0emdlc2V0emUuIEFsbGUgUGFzc3cmb3VtbDtydGVyIHdlcmRlbiB2b3IgZGVtIFZlcnNlbmRlbiBkZXIgSW5mb3JtYXRpb25lbiBhdXRvbWF0aXNpZXJ0IHVua2VubnRsaWNoIGdlbWFjaHQuIEluIGtlaW5lbSBGYWxsIHdlcmRlbiBkaWUgZXJob2JlbmVuIERhdGVuIHZlcmthdWZ0IG9kZXIgYXVzIGFuZGVyZW4gR3ImdXVtbDtuZGVuIGFuIHVuYXV0b3Jpc2llcnRlIERyaXR0ZSB3ZWl0ZXJnZWdlYmVuLgoKRGllIG5hY2hmb2xnZW5kZSBFcmtsJmF1bWw7cnVuZyBnaWJ0IElobmVuIGVpbmVuICZVdW1sO2JlcmJsaWNrIGRhciZ1dW1sO2Jlciwgd2llIHdpciBkaWVzZW4gU2NodXR6IGdldyZhdW1sO2hybGVpc3RlbiB1bmQgd2VsY2hlIEFydCB2b24gRGF0ZW4genUgd2VsY2hlbSBad2VjayAmdXVtbDtiZXJtaXR0ZWx0IHdlcmRlbi4KCkRhdGVuJnV1bWw7YmVybWl0dGx1bmcgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnCkRpZSBGaXJtYSBPVFJTIEFHICZ1dW1sO2Jlcm1pdHRlbHQgdW5kIHNwZWljaGVydCBJbmZvcm1hdGlvbmVuLCBkaWUgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnIGFuIGRpZSBGaXJtYSBPVFJTIEFHIHZlcnNlbmRldCB3ZXJkZW4uIERhYmVpIGhhbmRlbHQgZXMgc2ljaCB1bSBhdXNzY2hsaWUmc3psaWc7bGljaCB1bSBEYXRlbiwgZGllIGRpZSBGaXJtYSBPVFJTIEFHIGJlbiZvdW1sO3RpZ3QsIHVtIEZ1bmt0aW9uc2YmYXVtbDtoaWdrZWl0IHVuZCBMZWlzdHVuZ3NmJmF1bWw7aGlna2VpdCBkZXMgYmV0cm9mZmVuZW4gT1RSUy1TZXJ2ZXJzIHp1IGFuYWx5c2llcmVuLCBvZGVyIHVtIGVpbmUgS29udGFrdGF1Zm5haG1lIHp1IGVybSZvdW1sO2dsaWNoZW4uCgpTaWNoZXJoZWl0IElocmVyIHBlcnMmb3VtbDtubGljaGVuIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIHNjaCZ1dW1sO3R6dCBJaHJlIHBlcnMmb3VtbDtubGljaGVuIERhdGVuIHZvciB1bmVybGF1YnRlbiBadWdyaWZmLCBWZXJ3ZW5kdW5nIG9kZXIgVmVyJm91bWw7ZmZlbnRsaWNodW5nLiBEaWUgRmlybWEgT1RSUyBBRyBzb3JndCBkYWYmdXVtbDtyLCBkYXNzIHZvbiBJaG5lbiBhdWYgZGVtIFNlcnZlciBnZXNwZWljaGVydGUgcGVycyZvdW1sO25saWNoZSBJbmZvcm1hdGlvbmVuIGluIGVpbmVyIGtvbnRyb2xsaWVydGVuLCBzaWNoZXJlbiBVbWdlYnVuZyB2b3IgdW5lcmxhdWJ0ZW0gWnVncmlmZiB1bmQgVmVyJm91bWw7ZmZlbnRsaWNodW5nIGdlc2NoJlV1bWw7dHp0IHNpbmQuCgpXZWl0ZXJnYWJlIElocmVyIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIGdpYnQgSWhyZSBEYXRlbiBuaWNodCBhbiBEcml0dGUgd2VpdGVyLCBzb2Zlcm4gZGllcyBuaWNodCB6dXIgQWJ3aWNrbHVuZyBkZXMgR2VzY2gmYXVtbDtmdHN2ZXJrZWhyZXMgbiZvdW1sO3RpZyBpc3QuClNvd2VpdCBkaWUgRmlybWEgT1RSUyBBRyBnZXNldHpsaWNoIG9kZXIgcGVyIEdlcmljaHRzYmVzY2hsdXNzIGRhenUgdmVycGZsaWNodGV0IGlzdCwgZ2ViZW4gd2lyIElocmUgRGF0ZW4gbnVyIGFuIGF1c2t1bmZ0c2JlcmVjaHRpZ3RlIHN0YWF0bGljaGUgSW5zdGl0dXRpb25lbiB1bmQgQmVoJm91bWw7cmRlbiB3ZWl0ZXIuCgomQXVtbDtuZGVydW5nIGRpZXNlciBEYXRlbnNjaHV0emJlc3RpbW11bmdlbgpEaWUgRmlybWEgT1RSUyBBRyBiZWgmYXVtbDtsdCBzaWNoIGRhcyBSZWNodCB2b3IsIGRpZXNlIFNpY2hlcmhlaXRzLSB1bmQgRGF0ZW5zY2h1dHptYSZzemxpZztuYWhtZW4genUgdmVyJmF1bWw7bmRlcm4sIHNvd2VpdCBkaWVzIHdlZ2VuIGRlciB0ZWNobmlzY2hlbiBFbnR3aWNrbHVuZyBlcmZvcmRlcmxpY2ggd2lyZC4gSW4gc29sY2hlbiBGJmF1bWw7bGxlbiB3ZXJkZW4gd2lyIGF1Y2ggdW5zZXJlIEhpbndlaXNlIHp1bSBEYXRlbnNjaHV0eiBlbnRzcHJlY2hlbmQgYW5wYXNzZW4uIEJpdHRlIGJlYWNodGVuIFNpZSBkYWhlciBkaWUgamV3ZWlscyBha3R1ZWxsZSBWZXJzaW9uIHVuc2VyZXIgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZy4KCkF1c2t1bmZ0c3JlY2h0ClNpZSBoYWJlbiBqZWRlcnplaXQgZGFzIFJlY2h0IGF1ZiBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIGJleiZ1dW1sO2dsaWNoIElocmVyIFBlcnNvbiBnZXNwZWljaGVydGVuIERhdGVuLCBkZXJlbiBIZXJrdW5mdCB1bmQgRW1wZiZhdW1sO25nZXIgc293aWUgZGVuIFp3ZWNrIGRlciBEYXRlbnZlcmFyYmVpdHVuZy4gQXVza3VuZnQgJnV1bWw7YmVyIGRpZSBnZXNwZWljaGVydGVuIERhdGVuIGsmb3VtbDtubmVuIFNpZSB1bnRlciBpbmZvQG90cnMuY29tIGFuZm9yZGVybi4KCldlaXRlcmUgSW5mb3JtYXRpb25lbgpJaHIgVmVydHJhdWVuIGlzdCB1bnMgd2ljaHRpZy4gRGFoZXIgZ2ViZW4gd2lyIElobmVuIGdlcm5lIGplZGVyemVpdCBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIFZlcmFyYmVpdHVuZyBJaHJlciBwZXJzb25lbmJlem9nZW5lbiBEYXRlbi4gV2VubiBTaWUgRnJhZ2VuIGhhYmVuLCBkaWUgSWhuZW4gZGllc2UgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZyBuaWNodCBiZWFudHdvcnRlbiBrb25udGUgb2RlciB3ZW5uIFNpZSB3ZWl0ZXJlIEluZm9ybWF0aW9uZW4genUgZWluZW0gUHVua3QgdyZ1dW1sO25zY2hlbiwgd2VuZGVuIFNpZSBzaWNoIGJpdHRlIG1pdCBlaW5lciBFLU1haWwgYW4gaW5mb0BvdHJzLmNvbS4KICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRERSAtLT4KPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudEVOIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGEgUHJvdGVjdGlvbgoKSGVyZSBhdCBPVFJTIEFHIHdlIHRha2UgdGhlIHByb3RlY3Rpb24gb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIHZlcnkgc2VyaW91c2x5IGFuZCBzdHJpY3RseSBhZGhlcmUgdG8gZGF0YSBwcm90ZWN0aW9uIGxhd3MuIEFsbCBwYXNzd29yZHMgYXJlIGF1dG9tYXRpY2FsbHkgbWFkZSB1bnJlY29nbml6YWJsZSBiZWZvcmUgdGhlIGluZm9ybWF0aW9uIGlzIHNlbnQuIFVuZGVyIG5vIGNpcmN1bXN0YW5jZXMgd2lsbCBhbnkgZGF0YSB3ZSBvYnRhaW4gYmUgc29sZCBvciBwYXNzZWQgb24gdG8gdW5hdXRob3JpemVkIHRoaXJkIHBhcnRpZXMuClRoZSBmb2xsb3dpbmcgZXhwbGFuYXRpb24gcHJvdmlkZXMgeW91IHdpdGggYW4gb3ZlcnZpZXcgb2YgaG93IHdlIGd1YXJhbnRlZSB0aGlzIHByb3RlY3Rpb24gYW5kIHdoaWNoIHR5cGUgb2YgZGF0YSBpcyBjb2xsZWN0ZWQgZm9yIHdoaWNoIHB1cnBvc2UuCgpEYXRhIEhhbmRsaW5nIHdpdGggJ1N1cHBvcnQgTW9kdWxlJwpJbmZvcm1hdGlvbiByZWNlaXZlZCB0aHJvdWdoIHRoZSAnU3VwcG9ydCBNb2R1bGUnIGlzIHNhdmVkIGJ5IE9UUlMgQUcuIFRoaXMgb25seSBhcHBsaWVzIHRvIGRhdGEgdGhhdCBPVFJTIEFHIHJlcXVpcmVzIHRvIGFuYWx5emUgdGhlIHBlcmZvcm1hbmNlIGFuZCBmdW5jdGlvbiBvZiB0aGUgT1RSUyBzZXJ2ZXIgb3IgdG8gZXN0YWJsaXNoIGNvbnRhY3QuCgpTYWZldHkgb2YgUGVyc29uYWwgRGV0YWlscwpPVFJTIEFHIHByb3RlY3RzIHlvdXIgcGVyc29uYWwgZGF0YSBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MsIHVzZSBvciBwdWJsaWNhdGlvbi4gT1RSUyBBRyBlbnN1cmVzIHRoYXQgdGhlIHBlcnNvbmFsIGluZm9ybWF0aW9uIHlvdSBzdG9yZSBvbiB0aGUgc2VydmVyIGlzIHByb3RlY3RlZCBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MgYW5kIHB1YmxpY2F0aW9uLgoKRGlzY2xvc3VyZSBvZiBEZXRhaWxzCk9UUlMgQUcgd2lsbCBub3QgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gdGhpcmQgcGFydGllcyB1bmxlc3MgcmVxdWlyZWQgZm9yIGJ1c2luZXNzIHRyYW5zYWN0aW9ucy4KT1RSUyBBRyB3aWxsIG9ubHkgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gZW50aXRsZWQgcHVibGljIGluc3RpdHV0aW9ucyBhbmQgYXV0aG9yaXRpZXMgaWYgcmVxdWlyZWQgYnkgbGF3IG9yIGNvdXJ0IG9yZGVyLgoKQW1lbmRtZW50IG9mIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kKT1RSUyBBRyByZXNlcnZlcyB0aGUgcmlnaHQgdG8gYW1lbmQgdGhpcyBzZWN1cml0eSBhbmQgZGF0YSBwcm90ZWN0aW9uIHBvbGljeSBpZiByZXF1aXJlZCBieSB0ZWNobmljYWwgZGV2ZWxvcG1lbnRzLiBJbiB0aGlzIGNhc2Ugd2Ugd2lsbCBhbHNvIGFkYXB0IG91ciBpbmZvcm1hdGlvbiByZWdhcmRpbmcgZGF0YSBwcm90ZWN0aW9uIGFjY29yZGluZ2x5LiBQbGVhc2UgcmVndWxhcmx5IHJlZmVyIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBvdXIgRGF0YSBQcm90ZWN0aW9uIFBvbGljeS4KClJpZ2h0IHRvIEluZm9ybWF0aW9uCllvdSBoYXZlIHRoZSByaWdodCB0byBkZW1hbmQgaW5mb3JtYXRpb24gY29uY2VybmluZyB0aGUgZGF0YSBzYXZlZCBhYm91dCB5b3UsIGl0cyBvcmlnaW4gYW5kIHJlY2lwaWVudHMsIGFzIHdlbGwgYXMgdGhlIHB1cnBvc2Ugb2YgdGhlIGRhdGEgcHJvY2Vzc2luZyBhdCBhbnkgdGltZS4gWW91IGNhbiByZXF1ZXN0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBzYXZlZCBkYXRhIGJ5IHNlbmRpbmcgYW4gZS1tYWlsIHRvIGluZm9Ab3Rycy5jb20uCgpGdXJ0aGVyIEluZm9ybWF0aW9uCllvdXIgdHJ1c3QgaXMgdmVyeSBpbXBvcnRhbnQgdG8gdXMuIFdlIGFyZSB3aWxsaW5nIHRvIGluZm9ybSB5b3UgYWJvdXQgdGhlIHByb2Nlc3Npbmcgb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIGF0IGFueSB0aW1lLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHRoYXQgaGF2ZSBub3QgYmVlbiBhbnN3ZXJlZCBieSB0aGlzIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kgb3IgaWYgeW91IHJlcXVpcmUgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIHRvcGljLCBwbGVhc2UgY29udGFjdCBpbmZvQG90cnMuY29tLgoKICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRFTiAtLT4K</File>
        <File Location="Kernel/System/Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZS5wbSAtIGFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMiBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IERhdGFiYXNlLnBtLHYgMS4xMyAyMDEyLzA5LzA0IDA0OjEwOjA5IGNnIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMyAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OkRhdGFiYXNlIC0gZ2xvYmFsIHN5c3RlbSBpbmZvcm1hdGlvbgoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgcmVxdWlyZWQgc3lzdGVtIGluZm9ybWF0aW9uIHRvIGEgcnVubmluZyBPVFJTIGhvc3QuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBEYXRhYmFzZSBpbmZvIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJFN5c3RlbUluZm9PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6RGF0YWJhc2UtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IERCT2JqZWN0IEVuY29kZU9iamVjdCBMYXlvdXRPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskX30gPSAkUGFyYW17JF99IHx8IGRpZSAiR290IG5vICRfISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBBZG1pbkNoZWNrc0dldCgpCgpyZXR1cm5zIGEgYXJyYXkgcmVmZXJlbmNlIHdpdGggQWRtaW5DaGVja3MgaW5mb3JtYXRpb24uCgokRGF0YWJhc2VBcnJheSA9PiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1BsYXR0Zm9ybScsCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdMaW51eCcsCiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAnUGxlYXNlIGFkZCBtb3JlIG1lbW9yeS4nLAogICAgICAgICAgICAgICAgQ2hlY2sgPT4gJ09LJywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSA9PiAnVmVyc2lvbicsCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdvcGVuU1VTRSAxMC4yJywKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICdQbGVhc2UgYWRkIG1vcmUgbWVtb3J5LicsCiAgICAgICAgICAgICAgICBDaGVjayA9PiAnT0snLAogICAgICAgICAgICB9LAogICAgICAgIF07Cgo9Y3V0CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YUFycmF5ID0gW107CgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgIyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIGRhdGFiYXNlcwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwoKICAgICMgcGxlYXNlIGFkZCBmb3IgZWFjaCBuZXcgY2hlY2sgYSBwYXJ0IGxpa2UgdGhpcwogICAgIyAgICBteSAkT25lQ2hlY2sgPSAkU2VsZi0+Q2hlY2soKTsKICAgICMgICAgcHVzaCAoQHskRGF0YUFycmF5fSwgJE9uZUNoZWNrKTsKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIEdldCBpbmZvcm1hdGlvbiBhYm91dCB1c2VkIGRhdGFiYXNlCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCgogICAgIyB0cnkgdG8gZmluZCBvdXQgd2hpY2ggdGlja2V0IGRhdGFiYXNlIGlzIGNvbmZpZ3VyZWQKICAgIG15ICREYXRhYmFzZVR5cGUgPSAkU2VsZi0+e0RCT2JqZWN0fS0+eydEQjo6VHlwZSd9OwoKICAgICMgdHJ5IHRvIGdldCBhdmFpbGFibGUgbW9kdWxlcyBhbmQgdGhlIGRpcmVjdG9yeSBuYW1lCiAgICBteSAkRGlyTmFtZSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdIb21lJykgLiAiL0tlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZSI7CgogICAgIyByZWFkIGFsbCBhdmFpbGFibGUgbW9kdWxlcyBpbiBATGlzdAogICAgbXkgQExpc3QgPSBnbG9iKCAkRGlyTmFtZSAuICIvKi5wbSIgKTsKICAgIGZvciBteSAkRmlsZSAoQExpc3QpIHsKCiAgICAgICAgIyByZW1vdmUgLnBtCiAgICAgICAgJEZpbGUgPX4gcy9eLipcLyguKz8pXC5wbSQvJDEvOwogICAgICAgIGlmICggJERhdGFiYXNlVHlwZSA9fiAvT0RCQy9pICkgewogICAgICAgICAgICAkRGF0YWJhc2VUeXBlID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0RhdGFiYXNlOjpUeXBlJyk7CiAgICAgICAgfQogICAgICAgIGlmICggJERhdGFiYXNlVHlwZSA9fiAvXiRGaWxlL2kgKSB7CiAgICAgICAgICAgIG15ICRHZW5lcmljTW9kdWxlID0gIktlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTo6JEZpbGUiOwoKICAgICAgICAgICAgIyBsb2FkIG1vZHVsZSAkR2VuZXJpY01vZHVsZSBhbmQgY2hlY2sgaWYgbG9hZGFibGUKICAgICAgICAgICAgaWYgKCAkU2VsZi0+e01haW5PYmplY3R9LT5SZXF1aXJlKCRHZW5lcmljTW9kdWxlKSApIHsKCiAgICAgICAgICAgICAgICAjIGNyZWF0ZSBuZXcgb2JqZWN0CiAgICAgICAgICAgICAgICBteSAkU3VwcG9ydE9iamVjdCA9ICRHZW5lcmljTW9kdWxlLT5uZXcoICV7JFNlbGZ9ICk7CiAgICAgICAgICAgICAgICBpZiAoJFN1cHBvcnRPYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICBteSAkQXJyYXlSZWYgPSAkU3VwcG9ydE9iamVjdC0+QWRtaW5DaGVja3NHZXQoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoICRBcnJheVJlZiAmJiByZWYoJEFycmF5UmVmKSBlcSAnQVJSQVknICkgewogICAgICAgICAgICAgICAgICAgICAgICBwdXNoKCBAeyREYXRhQXJyYXl9LCBAeyRBcnJheVJlZn0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIHJldHVybiAkRGF0YUFycmF5Owp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAoKPWhlYWQxIFZFUlNJT04KCiRSZXZpc2lvbjogMS4xMyAkICREYXRlOiAyMDEyLzA5LzA0IDA0OjEwOjA5ICQKCj1jdXQK</File>
        <File Location="Kernel/System/Support/OS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/OTRS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Webserver/IIS.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIvSUlTLnBtIC0gYWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbgojIENvcHlyaWdodCAoQykgMjAwMS0yMDEzIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogSUlTLnBtLHYgMS4xMSAyMDEzLzAyLzA0IDA3OjA4OjQxIG1iIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpXZWJzZXJ2ZXI6OklJUzsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMSAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBMYXlvdXRPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskX30gPSAkUGFyYW17JF99IHx8IGRpZSAiR290IG5vICRfISI7CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBBZG1pbkNoZWNrc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IG5hbWVzIG9mIGF2YWlsYWJsZSBjaGVja3MgZnJvbSBzeXNjb25maWcKICAgIG15ICRDaGVja3MgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnU3VwcG9ydDo6V2Vic2VydmVyOjpJSVMnKTsKCiAgICAjIGZpbmQgb3V0IHdoaWNoIGNoZWNrcyBzaG91bGQgYXJlIGVuYWJsZWQgaW4gc3lzY29uZmlnCiAgICBteSBARW5hYmxlZENoZWNrRnVuY3Rpb25zOwogICAgaWYgKCAkQ2hlY2tzICYmIHJlZiAkQ2hlY2tzIGVxICdIQVNIJyApIHsKCiAgICAgICAgIyBnZXQgYWxsIGVuYWJsZWQgY2hlY2sgZnVuY3Rpb24gbmFtZXMKICAgICAgICBARW5hYmxlZENoZWNrRnVuY3Rpb25zID0gc29ydCBncmVwIHsgJENoZWNrcy0+eyRffSB9IGtleXMgJXskQ2hlY2tzfTsKICAgIH0KCiAgICAjIHRvIHN0b3JlIHRoZSByZXN1bHQKICAgIG15IEBEYXRhQXJyYXk7CgogICAgRlVOQ1RJT05OQU1FOgogICAgZm9yIG15ICRGdW5jdGlvbk5hbWUgKEBFbmFibGVkQ2hlY2tGdW5jdGlvbnMpIHsKCiAgICAgICAgIyBwcmVwZW5kIGFuIHVuZGVyc2NvcmUKICAgICAgICAkRnVuY3Rpb25OYW1lID0gJ18nIC4gJEZ1bmN0aW9uTmFtZTsKCiAgICAgICAgIyBydW4gZnVuY3Rpb24gYW5kIGdldCBjaGVjayBkYXRhCiAgICAgICAgbXkgJENoZWNrID0gJFNlbGYtPiRGdW5jdGlvbk5hbWUoKTsKCiAgICAgICAgbmV4dCBGVU5DVElPTk5BTUUgaWYgISRDaGVjazsKCiAgICAgICAgIyBhdHRhY2ggY2hlY2sgZGF0YSBpZiB2YWxpZAogICAgICAgIHB1c2ggQERhdGFBcnJheSwgJENoZWNrOwogICAgfQoKICAgIHJldHVybiBcQERhdGFBcnJheTsKfQoKc3ViIF9QZXJsRXhDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhID0ge307CgogICAgbXkgJENoZWNrICAgPSAnJzsKICAgIG15ICRNZXNzYWdlID0gJyc7CiAgICBpZiAoICRFTlZ7J0dBVEVXQVlfSU5URVJGQUNFJ30gJiYgJEVOVnsnR0FURVdBWV9JTlRFUkZBQ0UnfSA9fiAvXkNHSS1QZXJsRXgvaSApIHsKICAgICAgICAkQ2hlY2sgPSAnT0snOwogICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnUGVybEV4IGlzIGluIHVzZScpIC4gIiAoJEVOVnsnR0FURVdBWV9JTlRFUkZBQ0UnfSkuIjsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRDaGVjayA9ICdGYWlsZWQnOwogICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnWW91IHNob3VsZCB1c2UgUGVybEV4IHRvIGluY3JlYXNlIHlvdXIgcGVyZm9ybWFuY2UuJyk7CiAgICB9CiAgICAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAnUGVybEV4JywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBpZiBQZXJsRXggaXMgdXNlZC4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX0lJU1ZlcnNpb25DaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhICAgID0ge307CiAgICBteSAkQ2hlY2sgICA9ICcnOwogICAgbXkgJE1lc3NhZ2UgPSAnJzsKICAgIGlmICggJEVOVntTRVJWRVJfU09GVFdBUkV9ICkgewogICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1lvdSBhcmUgcnVubmluZycpIC4gIiAkRU5We1NFUlZFUl9TT0ZUV0FSRX0uIjsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICAgICAgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDb3VsZCBub3QgZGV0ZXJtaW5lIElJUyB2ZXJzaW9uLicpOwogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnSUlTIFZlcnNpb24nKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdEaXNwbGF5IHdlYiBzZXJ2ZXIgdmVyc2lvbi4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX0lJU0Vudmlyb25tZW50Q2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAlRW52aXJvbm1lbnQgPSAlRU5WOwoKICAgIGZvciBteSAkTm90TmVlZGVkU3RyaW5nICgKICAgICAgICBxdyggSFRUUF9SRUZFUkVSICAgICAgICAgSFRUUF9DQUNIRV9DT05UUk9MICAgSFRUUF9DT09LSUUgICAgSFRUUF9VU0VSX0FHRU5UCiAgICAgICAgSFRUUF9BQ0NFUFRfTEFOR1VBR0UgSFRUUF9BQ0NFUFRfRU5DT0RJTkcgSFRUUF9BQ0NFUFQKICAgICAgICBRVUVSWV9TVFJJTkcgICAgICAgICBSRVFVRVNUX01FVEhPRCAgICAgICBSRVFVRVNUX1VSSSAgICBTQ1JJUFRfTkFNRQogICAgICAgIEFMTFVTRVJTUFJPRklMRSAgICAgIEFQUERBVEEgICAgICAgICAgICAgIExPQ0FMQVBQREFUQSAgIENPTU1PTlBST0dSQU1GSUxFUwogICAgICAgIFBST0dSQU1EQVRBICAgICAgICAgIFBST0dSQU1GSUxFUyAgICAgICAgIFBTTU9EVUxFUEFUSCAgIFBVQkxJQwogICAgICAgIFNZU1RFTURSSVZFICAgICAgICAgIFNZU1RFTVJPT1QgICAgICAgICAgIFRFTVAgICAgICAgICAgIFdJTkRJUgogICAgICAgIFVTRVJQUk9GSUxFICkKICAgICAgICApCiAgICB7CiAgICAgICAgZGVsZXRlICRFbnZpcm9ubWVudHskTm90TmVlZGVkU3RyaW5nfTsKICAgIH0KCiAgICBteSAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdTZXJ2ZXIgRW52aXJvbm1lbnQnKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdEaXNwbGF5IGVudmlyb25tZW50IHZhcmlhYmxlcycpLAogICAgICAgIENvbW1lbnQgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0dlbmVyYWwgaW5mb3JtYXRpb24gYWJvdXQgeW91ciBzeXN0ZW0uJyksCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJ09LJywKICAgICAgICBCbG9ja1N0eWxlICA9PiAnVGFibGVEYXRhU2ltcGxlJywKICAgICAgICBUYWJsZUluZm8gICA9PiBcJUVudmlyb25tZW50LAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKMTsK</File>
        <File Location="Kernel/System/Support/Webserver/Apache.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/oracle.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mssql.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZS9tc3NxbC5wbSAtIGFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMiBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IG1zc3FsLnBtLHYgMS4yMCAyMDEyLzA5LzA1IDA0OjMzOjM5IGNnIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTo6bXNzcWw7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlhNTDsKdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwoKdXNlIHZhcnMgcXcoQElTQSAkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjIwICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgREJPYmplY3QgRW5jb2RlT2JqZWN0IExheW91dE9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57WE1MT2JqZWN0fSAgICAgID0gS2VybmVsOjpTeXN0ZW06OlhNTC0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntUaW1lT2JqZWN0fSAgICAgPSBLZXJuZWw6OlN5c3RlbTo6VGltZS0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntMYW5ndWFnZU9iamVjdH0gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH07CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuYW1lcyBvZiBhdmFpbGFibGUgY2hlY2tzIGZyb20gc3lzY29uZmlnCiAgICBteSAkQ2hlY2tzID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ1N1cHBvcnQ6OkRhdGFiYXNlOjpNU1NRTCcpOwoKICAgICMgZmluZCBvdXQgd2hpY2ggY2hlY2tzIGFyZSBlbmFibGVkIGluIHN5c2NvbmZpZwogICAgbXkgQEVuYWJsZWRDaGVja0Z1bmN0aW9uczsKICAgIGlmICggJENoZWNrcyAmJiByZWYgJENoZWNrcyBlcSAnSEFTSCcgKSB7CgogICAgICAgICMgZ2V0IGFsbCBlbmFibGVkIGNoZWNrIGZ1bmN0aW9uIG5hbWVzCiAgICAgICAgQEVuYWJsZWRDaGVja0Z1bmN0aW9ucyA9IGdyZXAgeyAkQ2hlY2tzLT57JF99IH0ga2V5cyAleyRDaGVja3N9OwogICAgfQoKICAgICMgdG8gc3RvcmUgdGhlIHJlc3VsdAogICAgbXkgQERhdGFBcnJheTsKCiAgICBGVU5DVElPTk5BTUU6CiAgICBmb3IgbXkgJEZ1bmN0aW9uTmFtZSAoQEVuYWJsZWRDaGVja0Z1bmN0aW9ucykgewoKICAgICAgICAjIHByZXBlbmQgYW4gdW5kZXJzY29yZQogICAgICAgICRGdW5jdGlvbk5hbWUgPSAnXycgLiAkRnVuY3Rpb25OYW1lOwoKICAgICAgICAjIHJ1biBmdW5jdGlvbiBhbmQgZ2V0IGNoZWNrIGRhdGEKICAgICAgICBteSAkQ2hlY2sgPSAkU2VsZi0+JEZ1bmN0aW9uTmFtZSgpOwoKICAgICAgICBuZXh0IEZVTkNUSU9OTkFNRSBpZiAhJENoZWNrOwoKICAgICAgICAjIGF0dGFjaCBjaGVjayBkYXRhIGlmIHZhbGlkCiAgICAgICAgcHVzaCBARGF0YUFycmF5LCAkQ2hlY2s7CiAgICB9CgogICAgcmV0dXJuIFxARGF0YUFycmF5Owp9CgpzdWIgX1ZlcnNpb25DaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhID0ge307CgogICAgIyB2ZXJzaW9uIGNoZWNrCiAgICBteSAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDb3VsZCBub3QgZGV0ZXJtaW5lIE1pY3Jvc29mdCBTUUwgU2VydmVyIHZlcnNpb24uJyk7CiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgICA9PiAnU0VMRUNUIEBAdmVyc2lvbicsCiAgICAgICAgTGltaXQgPT4gMSwKICAgICk7CgogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkTWVzc2FnZSA9ICRSb3dbMF07CiAgICAgICAgJENoZWNrICAgPSAnT0snOwogICAgfQoKICAgICREYXRhID0gewogICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1ZlcnNpb24nKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBkYXRhYmFzZSB2ZXJzaW9uLicpLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfRGF0YWJhc2VTaXplQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSA9IHt9OwoKICAgICMgRGF0YWJhc2Ugc2l6ZSBjaGVjawogICAgbXkgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgIG15ICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ291bGQgbm90IGRldGVybWluZSBkYXRhYmFzZSBzaXplLicpOwogICAgJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICAgPT4gJ2V4ZWMgc3Bfc3BhY2V1c2VkJywKICAgICAgICBMaW1pdCA9PiAxLAogICAgKTsKCiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICRNZXNzYWdlID0KICAgICAgICAgICAgJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGF0YWJhc2UnKQogICAgICAgICAgICAuICIgJFJvd1swXSAiIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnaXMnKSAuICIgJFJvd1sxXSAiCiAgICAgICAgICAgIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnbGFyZ2UsIG9mIHdoaWNoJykKICAgICAgICAgICAgLiAiICRSb3dbMl0gIiAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ2lzIGF2YWlsYWJsZS4nKTsKICAgICAgICAkQ2hlY2sgPSAnT0snOwogICAgfQoKICAgICREYXRhID0gewogICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1NpemUnKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBkYXRhYmFzZSBzaXplLicpLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfRGF0YWJhc2VIb3N0bmFtZUNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJERhdGEgPSB7fTsKCiAgICAjIERhdGFiYXNlIHNpemUgY2hlY2sKICAgIG15ICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICBteSAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NvdWxkIG5vdCBkZXRlcm1pbmUgZGF0YWJhc2UgaG9zdG5hbWUuJyk7CgogICAgaWYgKCBteSAkRGF0YWJhc2VIb3N0ID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0RhdGFiYXNlSG9zdCcpICkgewogICAgICAgICRNZXNzYWdlID0gJERhdGFiYXNlSG9zdDsKICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICB9CgogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnSG9zdG5hbWUnKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBkYXRhYmFzZSBob3N0bmFtZS4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX1RhYmxlQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSA9IHt9OwoKICAgICMgdGFibGUgY2hlY2sKICAgIG15ICRGaWxlID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0hvbWUnKSAuICcvc2NyaXB0cy9kYXRhYmFzZS9vdHJzLXNjaGVtYS54bWwnOwogICAgaWYgKCAtZiAkRmlsZSApIHsKICAgICAgICBteSAkQ291bnQgICA9IDA7CiAgICAgICAgbXkgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgICAgICBteSAkTWVzc2FnZSA9ICcnOwogICAgICAgIG15ICRDb250ZW50ID0gJyc7CiAgICAgICAgbXkgJEluOwogICAgICAgIGlmICggb3BlbiggJEluLCAnPCcsICRGaWxlICkgKSB7CiAgICAgICAgICAgIHdoaWxlICg8JEluPikgewogICAgICAgICAgICAgICAgJENvbnRlbnQgLj0gJF87CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2xvc2UoJEluKTsKICAgICAgICAgICAgbXkgQFhNTEhhc2ggPSAkU2VsZi0+e1hNTE9iamVjdH0tPlhNTFBhcnNlMlhNTEhhc2goIFN0cmluZyA9PiAkQ29udGVudCApOwogICAgICAgICAgICBmb3IgbXkgJFRhYmxlICggQHsgJFhNTEhhc2hbMV0tPntkYXRhYmFzZX0tPlsxXS0+e1RhYmxlfSB9ICkgewogICAgICAgICAgICAgICAgaWYgKCRUYWJsZSkgewogICAgICAgICAgICAgICAgICAgIGlmICggJFRhYmxlLT57TmFtZX0gZXEgJ3N5c3RlbV91c2VyJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRhYmxlLT57TmFtZX0gPSAnc3lzdGVtX3VzZXIyJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJENvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNRTCAgID0+ICJzZWxlY3QgKiBmcm9tICRUYWJsZS0+e05hbWV9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpbWl0ID0+IDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVzc2FnZSAuPSAiJFRhYmxlLT57TmFtZX0sICI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkTWVzc2FnZSkgewogICAgICAgICAgICAgICAgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCJUYWJsZSBkb2Vzbid0IGV4aXN0IikgLiAiOiAkTWVzc2FnZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgICAgICAgICAkTWVzc2FnZSA9ICIkQ291bnQgIiAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ3RhYmxlcy4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkRGF0YSA9IHsKICAgICAgICAgICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1RhYmxlIENoZWNrJyksCiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBleGlzdGluZyBmcmFtZXdvcmsgdGFibGVzLicpLAogICAgICAgICAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRGF0YSA9IHsKICAgICAgICAgICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1RhYmxlIENoZWNrJyksCiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBleGlzdGluZyBmcmFtZXdvcmsgdGFibGVzLicpLAogICAgICAgICAgICAgICAgQ29tbWVudCAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgiQ2FuJ3Qgb3BlbiBmaWxlIikgLiAiICRGaWxlOiAkISIsCiAgICAgICAgICAgICAgICBDaGVjayAgICAgICA9PiAnQ3JpdGljYWwnLAogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgICREYXRhID0gewogICAgICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdUYWJsZSBDaGVjaycpLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBleGlzdGluZyBmcmFtZXdvcmsgdGFibGVzLicpLAogICAgICAgICAgICBDb21tZW50ICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCJDYW4ndCBmaW5kIGZpbGUiKSAuICIgJEZpbGUhIiwKICAgICAgICAgICAgQ2hlY2sgICAgICAgPT4gJ0ZhaWxlZCcsCiAgICAgICAgfTsKICAgIH0KICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9DdXJyZW50VGltZXN0YW1wQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgIG15ICREYXRhICAgPSB7fTsKICAgIG15ICREYlRpbWUgPSAnJzsKCiAgICAjIEN1cnJlbnQgVGltZXN0YW1wIGNoZWNrCiAgICBteSAkQ2hlY2sgICA9ICcnOwogICAgbXkgJE1lc3NhZ2UgPSAnJzsKICAgICRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKCBTUUwgPT4gIlNFTEVDVCBjdXJyZW50X3RpbWVzdGFtcCIgKTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgJERiVGltZSA9ICRSb3dbMF07CiAgICB9CiAgICBteSAkVGltZUFwcGxpY2F0aW9uU2VydmVyID0gJFNlbGYtPntUaW1lT2JqZWN0fS0+U3lzdGVtVGltZSgpOwogICAgbXkgJFRpbWVEYXRhYmFzZVNlcnZlciAgICA9ICRTZWxmLT57VGltZU9iamVjdH0tPlRpbWVTdGFtcDJTeXN0ZW1UaW1lKAogICAgICAgIFN0cmluZyA9PiAkRGJUaW1lLAogICAgKTsKCiAgICBteSAkVGltZURpZmZlcmVuY2UgPSAwOwogICAgbXkgJFJhbmdlICAgICAgICAgID0gMTA7CiAgICAkVGltZURpZmZlcmVuY2UgPSAkVGltZUFwcGxpY2F0aW9uU2VydmVyIC0gJFRpbWVEYXRhYmFzZVNlcnZlcjsKICAgIGlmICggKCAkVGltZURpZmZlcmVuY2UgPj0gKCAkUmFuZ2UgKiAtMSApICkgJiYgKCAkVGltZURpZmZlcmVuY2UgPD0gJFJhbmdlICkgKSB7CiAgICAgICAgJENoZWNrID0gJ09LJzsKICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoCiAgICAgICAgICAgICdUaGVyZSBpcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gYXBwbGljYXRpb24gc2VydmVyIHRpbWUgYW5kIGRhdGFiYXNlIHNlcnZlciB0aW1lLicKICAgICAgICAgICAgKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRDaGVjayA9ICdGYWlsZWQnOwogICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnVGhlcmUgaXMgYSBtYXRlcmlhbCBkaWZmZXJlbmNlICgnKQogICAgICAgICAgICAuICRUaW1lRGlmZmVyZW5jZQogICAgICAgICAgICAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJyBzZWNvbmRzKSBiZXR3ZWVuIGFwcGxpY2F0aW9uIHNlcnZlciAoJykKICAgICAgICAgICAgLiAkVGltZUFwcGxpY2F0aW9uU2VydmVyIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnKSBhbmQgZGF0YWJhc2Ugc2VydmVyICgnKQogICAgICAgICAgICAuICRUaW1lRGF0YWJhc2VTZXJ2ZXIgLiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCcpIHRpbWUuJyk7CiAgICB9CgogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ3VycmVudCBUaW1lc3RhbXAgQ2hlY2snKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayAiU3lzdGVtIFRpbWUiIHZzICJDdXJyZW50IFRpbWVzdGFtcCIuJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoxOwo=</File>
        <File Location="Kernel/System/Support/Database/postgresql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mysql.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZS9teXNxbC5wbSAtIGFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMyBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IG15c3FsLnBtLHYgMS4zNiAyMDEzLzAxLzIzIDE2OjM4OjI3IGNyIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTo6bXlzcWw7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlhNTDsKdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwoKdXNlIHZhcnMgcXcoQElTQSAkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjM2ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgREJPYmplY3QgRW5jb2RlT2JqZWN0IExheW91dE9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57WE1MT2JqZWN0fSAgICAgID0gS2VybmVsOjpTeXN0ZW06OlhNTC0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntUaW1lT2JqZWN0fSAgICAgPSBLZXJuZWw6OlN5c3RlbTo6VGltZS0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntMYW5ndWFnZU9iamVjdH0gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH07CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuYW1lcyBvZiBhdmFpbGFibGUgY2hlY2tzIGZyb20gc3lzY29uZmlnCiAgICBteSAkQ2hlY2tzID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ1N1cHBvcnQ6OkRhdGFiYXNlOjpNeVNRTCcpOwoKICAgICMgZmluZCBvdXQgd2hpY2ggY2hlY2tzIHNob3VsZCBhcmUgZW5hYmxlZCBpbiBzeXNjb25maWcKICAgIG15IEBFbmFibGVkQ2hlY2tGdW5jdGlvbnM7CiAgICBpZiAoICRDaGVja3MgJiYgcmVmICRDaGVja3MgZXEgJ0hBU0gnICkgewoKICAgICAgICAjIGdldCBhbGwgZW5hYmxlZCBjaGVjayBmdW5jdGlvbiBuYW1lcwogICAgICAgIEBFbmFibGVkQ2hlY2tGdW5jdGlvbnMgPSBzb3J0IGdyZXAgeyAkQ2hlY2tzLT57JF99IH0ga2V5cyAleyRDaGVja3N9OwogICAgfQoKICAgICMgdG8gc3RvcmUgdGhlIHJlc3VsdAogICAgbXkgQERhdGFBcnJheTsKCiAgICBGVU5DVElPTk5BTUU6CiAgICBmb3IgbXkgJEZ1bmN0aW9uTmFtZSAoQEVuYWJsZWRDaGVja0Z1bmN0aW9ucykgewoKICAgICAgICAjIHByZXBlbmQgYW4gdW5kZXJzY29yZQogICAgICAgICRGdW5jdGlvbk5hbWUgPSAnXycgLiAkRnVuY3Rpb25OYW1lOwoKICAgICAgICAjIHJ1biBmdW5jdGlvbiBhbmQgZ2V0IGNoZWNrIGRhdGEKICAgICAgICBteSAkQ2hlY2sgPSAkU2VsZi0+JEZ1bmN0aW9uTmFtZSgpOwoKICAgICAgICBuZXh0IEZVTkNUSU9OTkFNRSBpZiAhJENoZWNrOwoKICAgICAgICAjIGF0dGFjaCBjaGVjayBkYXRhIGlmIHZhbGlkCiAgICAgICAgcHVzaCBARGF0YUFycmF5LCAkQ2hlY2s7CiAgICB9CgogICAgcmV0dXJuIFxARGF0YUFycmF5Owp9CgpzdWIgX1ZlcnNpb25DaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgdmVyc2lvbiBjaGVjawogICAgbXkgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgIG15ICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnTm8gTXlTUUwgdmVyc2lvbiBmb3VuZC4nKTsKICAgICRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKCBTUUwgPT4gJ3Nob3cgdmFyaWFibGVzJyApOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKCiAgICAgICAgIyBpZiByb3cgbm90IHZlcnNpb24gcm93LCBuZXh0LgogICAgICAgIGlmICggJFJvd1swXSAhfiAvXnZlcnNpb24kL2kgKSB7CiAgICAgICAgICAgIG5leHQ7CiAgICAgICAgfQoKICAgICAgICBpZiAoICRSb3dbMV0gPX4gL14oXGR7MSwzfSlcLihcZHsxLDN9KS4qJC8gKSB7CiAgICAgICAgICAgIGlmICggJDEgPj0gNCApIHsKICAgICAgICAgICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlID0gIk15U1FMICRSb3dbMV0iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnTXlTUUwgdmVyc2lvbicpIC4KICAgICAgICAgICAgICAgICAgICAiICRSb3dbMV0sICIgLgogICAgICAgICAgICAgICAgICAgICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ3lvdSBzaG91bGQgdXNlIDQuMSBvciBoaWdoZXIuJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRDaGVjayAgID0gJ0NyaXRpY2FsJzsKICAgICAgICAgICAgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdVbmtub3duIE15U1FMIHZlcnNpb24nKSAuICIgJFJvd1sxXS4iOwogICAgICAgIH0KICAgIH0KICAgIG15ICREYXRhID0gewogICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0RhdGFiYXNlIFZlcnNpb24uJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgZGF0YWJhc2UgdmVyc2lvbi4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX1VURjhTdXBwb3J0Q2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHV0Zi04IHN1cHBvcnQgY2hlY2sKICAgIGlmICggJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0RlZmF1bHRDaGFyc2V0JykgIX4gL3V0ZihcLTh8OCkvaSApIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGF0YWJhc2UgKHV0ZjgpJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgZGF0YWJhc2UgdXRmOCBzdXBwb3J0LicpLAogICAgICAgIENvbW1lbnQgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ05vIGRhdGFiYXNlIHZlcnNpb24gZm91bmQuJyksCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJ0NyaXRpY2FsJywKICAgIH07CgogICAgIyBhc2sgdGhlIGRhdGFiYXNlCiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICdzaG93IHZhcmlhYmxlcycgKTsKCiAgICAjIGZldGNoIHRoZSByZXN1bHQKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CgogICAgICAgICMgbmV4dCByb3cgaWYgbm90IHZlcnNpb24KICAgICAgICBuZXh0IGlmICRSb3dbMF0gIX4gL152ZXJzaW9uJC9pOwoKICAgICAgICAjIGZpbmQgdGhlIHZlcnNpb24gbnVtYmVyCiAgICAgICAgaWYgKCAkUm93WzFdID1+IC9eKDRcLigxfDJ8M3w0fDUpfDVcLnw2XC58N1wuKS8gKSB7CiAgICAgICAgICAgICREYXRhLT57Q29tbWVudH0gPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdZb3VyIGRhdGFiYXNlIHZlcnNpb24gc3VwcG9ydHMgdXRmOC4nKTsKICAgICAgICAgICAgJERhdGEtPntDaGVja30gICA9ICdPSyc7CgogICAgICAgICAgICBuZXh0OwogICAgICAgIH0KCiAgICAgICAgJERhdGEtPntDb21tZW50fQogICAgICAgICAgICA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ3V0ZjggaXMgbm90IHN1cHBvcnRlZCcpIC4gIihNeVNRTCAkUm93WzFdKS4iOwogICAgICAgICREYXRhLT57Q2hlY2t9ID0gJ0ZhaWxlZCc7CiAgICB9CgogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX1VURjhDbGllbnRDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgbXkgJERhdGEgPSB7fTsKCiAgICBteSAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdObyBjaGFyYWN0ZXJfc2V0X2NsaWVudCBzZXR0aW5nIGZvdW5kLicpOwoKICAgICMgdXRmLTggY2xpZW50IGNoZWNrCiAgICBpZiAoICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdEZWZhdWx0Q2hhcnNldCcpICF+IC91dGYoXC04fDgpL2kgKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgYXNrIHRoZSBkYXRhYmFzZQogICAgJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoIFNRTCA9PiAnc2hvdyB2YXJpYWJsZXMnICk7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewoKICAgICAgICAjbmV4dCBpZiByb3cgbm90IGNoYXJhY3Rlcl9zZXRfY2xpZW50CiAgICAgICAgbmV4dCBpZiAkUm93WzBdICF+IC9eY2hhcmFjdGVyX3NldF9jbGllbnQvaTsKCiAgICAgICAgaWYgKCAkUm93WzFdID1+IC91dGY4LyApIHsKICAgICAgICAgICAgJENoZWNrICAgPSAnT0snOwogICAgICAgICAgICAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1lvdXIgY2xpZW50IGNvbm5lY3Rpb24gaXMnKSAuICIgJFJvd1sxXS4iOwoKICAgICAgICAgICAgbmV4dDsKICAgICAgICB9CiAgICAgICAgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCJGb3VuZCBjaGFyYWN0ZXJfc2V0X2NsaWVudCwgYnV0IGl0J3Mgc2V0IHRvIikgLgogICAgICAgICAgICAiICRSb3dbMV0gKCIgLiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCduZWVkcyB0byBiZSB1dGY4JykgLiAnKS4nOwogICAgfQoKICAgICREYXRhID0gewogICAgICAgIE5hbWUgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2xpZW50IENvbm5lY3Rpb24gKHV0ZjgpJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4KICAgICAgICAgICAgJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgaWYgdGhlIGNsaWVudCB1c2VzIHV0ZjggZm9yIHRoZSBjb25uZWN0aW9uLicpLAogICAgICAgIENoZWNrICAgPT4gJENoZWNrLAogICAgICAgIENvbW1lbnQgPT4gJE1lc3NhZ2UsCiAgICB9OwoKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9VVEY4RGF0YWJhc2VDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgdXRmLTggZGF0YWJhc2UgY2hlY2sKICAgIGlmICggJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0RlZmF1bHRDaGFyc2V0JykgIX4gL3V0ZihcLTh8OCkvaSApIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBteSAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdObyBjaGFyYWN0ZXJfc2V0X2RhdGFiYXNlIHNldHRpbmcgZm91bmQuJyk7CiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICdzaG93IHZhcmlhYmxlcycgKTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgaWYgKCAkUm93WzBdID1+IC9eY2hhcmFjdGVyX3NldF9kYXRhYmFzZS9pICkgewogICAgICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICAgICAgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fQogICAgICAgICAgICAgICAgLT5HZXQoIkNoYXJhY3Rlcl9zZXRfZGF0YWJhc2Ugc2V0dGluZyBmb3VuZCwgYnV0IGl0J3Mgc2V0IHRvIikgLgogICAgICAgICAgICAgICAgIiAkUm93WzFdICgiIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnbmVlZHMgdG8gYmUgdXRmOCcpIC4gJykuJzsKICAgICAgICAgICAgaWYgKCAkUm93WzFdID1+IC91dGY4LyApIHsKICAgICAgICAgICAgICAgICRDaGVjayA9ICdPSyc7CiAgICAgICAgICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICAgICAgICAgID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnWW91ciBkYXRhYmFzZSBjaGFyc2V0IHNldHRpbmcgaXMnKSAuICIgJFJvd1sxXSI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGF0YWJhc2UgQ2hhcnNldCAodXRmOCknKSwKICAgICAgICBEZXNjcmlwdGlvbiA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDaGVjayBpZiB0aGUgZGF0YWJhc2UgdXNlcyB1dGY4IGFzIGNoYXJzZXQuJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKCiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfVVRGOFRhYmxlQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgIG15ICREYXRhID0ge307CgogICAgIyB1dGYtOCB0YWJsZSBjaGVjawogICAgaWYgKCAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnRGVmYXVsdENoYXJzZXQnKSA9fiAvdXRmKFwtOHw4KS9pICkgewogICAgICAgIG15ICRDaGVjayAgICA9ICdGYWlsZWQnOwogICAgICAgIG15ICRNZXNzYWdlICA9ICcnOwogICAgICAgIG15ICRNZXNzYWdlMiA9ICcnOwogICAgICAgICRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKCBTUUwgPT4gJ3Nob3cgdGFibGUgc3RhdHVzJyApOwogICAgICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgICAgIGlmICggJFJvd1sxNF0gIX4gL151dGY4L2kgKSB7CiAgICAgICAgICAgICAgICBpZiAoJE1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICAkTWVzc2FnZSAuPSAnLCAnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJE1lc3NhZ2UgLj0gIiRSb3dbMF1cWyRSb3dbMTRdXF0iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJE1lc3NhZ2UyID0gJFJvd1sxNF07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCRNZXNzYWdlKSB7CiAgICAgICAgICAgICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICAgICAgICAgICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnSW52YWxpZCBjaGFyc2V0IGNvbGxhdGlvbiBmb3InKSAuICI6ICRNZXNzYWdlIjsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAgICAgJE1lc3NhZ2UgPSAkTWVzc2FnZTI7CiAgICAgICAgfQogICAgICAgICREYXRhID0gewogICAgICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdUYWJsZSBDb2xsYXRpb24gKHV0ZjgpJyksCiAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NoZWNrIHRoZSB1dGY4IHRhYmxlIGNoYXJzZXQgY29sbGF0aW9uLicpLAogICAgICAgICAgICBDb21tZW50ICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdZb3VyIGNoYXJzZXQgY29sbGF0aW9uIGlzIHNldCB0bycpCiAgICAgICAgICAgICAgICAuICIgJE1lc3NhZ2UuIiwKICAgICAgICAgICAgQ2hlY2sgPT4gJENoZWNrLAogICAgICAgIH07CiAgICAgICAgcmV0dXJuICREYXRhOwogICAgfQogICAgcmV0dXJuOwp9CgpzdWIgX01heEFsbG93ZWRQYWNrYWdlQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgIG15ICREYXRhID0ge307CgogICAgIyBtYXhfYWxsb3dlZF9wYWNrZXQgY2hlY2sKICAgIG15ICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICBteSAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ05vICJtYXhfYWxsb3dlZF9wYWNrZXQiIGNvbmZpZ3VyYXRpb24gZm91bmQuJyk7CiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICdzaG93IHZhcmlhYmxlcycgKTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgaWYgKCAkUm93WzBdID1+IC9ebWF4X2FsbG93ZWRfcGFja2V0L2kgKSB7CiAgICAgICAgICAgIGlmICggJFJvd1sxXSA8IDEwMjQgKiAxMDI0ICogNyApIHsKICAgICAgICAgICAgICAgICRSb3dbMV0gID0gaW50KCAkUm93WzFdIC8gMTAyNCAvIDEwMjQgKTsKICAgICAgICAgICAgICAgICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICAgICAgICAgICAgICAkTWVzc2FnZSA9ICcibWF4X2FsbG93ZWRfcGFja2V0IiAnIC4KICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCJzaG91bGQgYmUgaGlnaGVyIHRoYW4gNyBNQiAoaXQncyIpCiAgICAgICAgICAgICAgICAgICAgLiAiICRSb3dbMV0gTUIpLiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUm93WzFdICA9IGludCggJFJvd1sxXSAvIDEwMjQgLyAxMDI0ICk7CiAgICAgICAgICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgICAgICAgICAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1lvdXIgY29uZmlndXJhdGlvbiBzZXR0aW5nIGlzJykKICAgICAgICAgICAgICAgICAgICAuICIgJFJvd1sxXSBNQi4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnTWF4IFBhY2thZ2UgU2l6ZScpLAogICAgICAgIERlc2NyaXB0aW9uID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NoZWNrICJtYXhfYWxsb3dlZF9wYWNrZXQiIHNldHRpbmcuJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9RdWVyeUNhY2hlU2l6ZUNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CiAgICBteSAkRGF0YSA9IHt9OwoKICAgICMgcXVlcnlfY2FjaGVfc2l6ZSBjaGVjawogICAgbXkgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgIG15ICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnTm8gInF1ZXJ5X2NhY2hlX3NpemUiIHNldHRpbmcgZm91bmQuJyk7CiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICdzaG93IHZhcmlhYmxlcycgKTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgaWYgKCAkUm93WzBdID1+IC9ecXVlcnlfY2FjaGVfc2l6ZS9pICkgewogICAgICAgICAgICBpZiAoICEkUm93WzFdICkgewogICAgICAgICAgICAgICAgJENoZWNrID0gJ0NyaXRpY2FsJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fQogICAgICAgICAgICAgICAgICAgIC0+R2V0KCdUaGUgc2V0dGluZyAicXVlcnlfY2FjaGVfc2l6ZSIgc2hvdWxkIGJlIHVzZWQuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzaWYgKCAkUm93WzFdIDwgMTAyNCAqIDEwMjQgKiAxMCApIHsKICAgICAgICAgICAgICAgICRSb3dbMV0gPSBpbnQoICRSb3dbMV0gLyAxMDI0IC8gMTAyNCApOwogICAgICAgICAgICAgICAgJENoZWNrID0gJ0NyaXRpY2FsJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fQogICAgICAgICAgICAgICAgICAgIC0+R2V0KCJUaGUgc2V0dGluZyAncXVlcnlfY2FjaGVfc2l6ZScgc2hvdWxkIGJlIGhpZ2hlciB0aGFuIDEwIE1CIChpdCdzIikKICAgICAgICAgICAgICAgICAgICAuICIgJFJvd1sxXSBNQikuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRSb3dbMV0gID0gaW50KCAkUm93WzFdIC8gMTAyNCAvIDEwMjQgKTsKICAgICAgICAgICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlID0gIiRSb3dbMV0gTUIiOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnUXVlcnkgQ2FjaGUgU2l6ZScpLAogICAgICAgIERlc2NyaXB0aW9uID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NoZWNrICJxdWVyeV9jYWNoZV9zaXplIiBzZXR0aW5nLicpLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfU3RvcmFnZUVuZ2luZUNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoIFNRTCA9PiAic2hvdyB2YXJpYWJsZXMgd2hlcmUgdmFyaWFibGVfbmFtZSA9ICdzdG9yYWdlX2VuZ2luZSciICk7CiAgICBteSAkU3RvcmFnZUVuZ2luZTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgJFN0b3JhZ2VFbmdpbmUgPSAkUm93WzFdOwogICAgfQogICAgbXkgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGVmYXVsdCBTdG9yYWdlIEVuZ2luZScpLAogICAgICAgIERlc2NyaXB0aW9uID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NoZWNrIERlZmF1bHQgU3RvcmFnZSBFbmdpbmUuJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnVGhlIGRlZmF1bHQgc3RvcmFnZSBlbmdpbmUgaXMnKQogICAgICAgICAgICAuICIgJFN0b3JhZ2VFbmdpbmUuIiwKICAgICAgICBDaGVjayA9PiAnT0snLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9UYWJsZXNXaXRoRGlmZmVyZW50U3RvcmFnZUVuZ2luZUNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJENoZWNrICAgPSAnT0snOwogICAgbXkgJENvbW1lbnQgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdObyB0YWJsZXMgZm91bmQgd2l0aCBkaWZmZXJlbnQgc3RvcmFnZSBlbmdpbmUuJyk7CiAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICJzaG93IHZhcmlhYmxlcyB3aGVyZSB2YXJpYWJsZV9uYW1lID0gJ3N0b3JhZ2VfZW5naW5lJyIgKTsKICAgIG15ICRTdG9yYWdlRW5naW5lOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkU3RvcmFnZUVuZ2luZSA9ICRSb3dbMV07CiAgICB9CgogICAgJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICA9PiAic2hvdyB0YWJsZSBzdGF0dXMgd2hlcmUgZW5naW5lICE9ID8iLAogICAgICAgIEJpbmQgPT4gWyBcJFN0b3JhZ2VFbmdpbmUgXSwKICAgICk7CiAgICBteSBAVGFibGVzOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICBwdXNoIEBUYWJsZXMsICRSb3dbMF07CiAgICB9CgogICAgaWYgKEBUYWJsZXMpIHsKICAgICAgICAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgICAgICRDb21tZW50ID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnVGhlc2UgdGFibGVzIHVzZSBhIGRpZmZlcmVudCBzdG9yYWdlIGVuZ2luZScpOwogICAgICAgICRDb21tZW50IC49ICc6ICcgLiBqb2luKCAnLCAnLCBAVGFibGVzICk7CiAgICB9CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnVGFibGVzIHdpdGggZGlmZmVyZW50IHN0b3JhZ2UgZW5naW5lJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0KICAgICAgICAgICAgLT5HZXQoJ1Rlc3QgaWYgdGhlcmUgYXJlIHRhYmxlcyB3aXRoIGEgZGlmZmVyZW50IHN0b3JhZ2UgZW5naW5lLicpLAogICAgICAgIENvbW1lbnQgPT4gJENvbW1lbnQsCiAgICAgICAgQ2hlY2sgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX0N1cnJlbnRUaW1lc3RhbXBDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgbXkgJERhdGEgICA9IHt9OwogICAgbXkgJERiVGltZSA9ICcnOwoKICAgICMgQ3VycmVudCBUaW1lc3RhbXAgY2hlY2sKICAgIG15ICRDaGVjayAgID0gJyc7CiAgICBteSAkTWVzc2FnZSA9ICcnOwogICAgJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoIFNRTCA9PiAiU0VMRUNUIGN1cnJlbnRfdGltZXN0YW1wIiApOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkRGJUaW1lID0gJFJvd1swXTsKICAgIH0KICAgIG15ICRUaW1lQXBwbGljYXRpb25TZXJ2ZXIgPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5TeXN0ZW1UaW1lKCk7CiAgICBteSAkVGltZURhdGFiYXNlU2VydmVyICAgID0gJFNlbGYtPntUaW1lT2JqZWN0fS0+VGltZVN0YW1wMlN5c3RlbVRpbWUoCiAgICAgICAgU3RyaW5nID0+ICREYlRpbWUsCiAgICApOwoKICAgIG15ICRUaW1lRGlmZmVyZW5jZSA9IDA7CiAgICBteSAkUmFuZ2UgICAgICAgICAgPSAxMDsKICAgICRUaW1lRGlmZmVyZW5jZSA9ICRUaW1lQXBwbGljYXRpb25TZXJ2ZXIgLSAkVGltZURhdGFiYXNlU2VydmVyOwogICAgaWYgKCAoICRUaW1lRGlmZmVyZW5jZSA+PSAoICRSYW5nZSAqIC0xICkgKSAmJiAoICRUaW1lRGlmZmVyZW5jZSA8PSAkUmFuZ2UgKSApIHsKICAgICAgICAkQ2hlY2sgPSAnT0snOwogICAgICAgICRNZXNzYWdlCiAgICAgICAgICAgID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgKICAgICAgICAgICAgJ1RoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBhcHBsaWNhdGlvbiBzZXJ2ZXIgdGltZSBhbmQgZGF0YWJhc2Ugc2VydmVyIHRpbWUuJwogICAgICAgICAgICApOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJENoZWNrID0gJ0ZhaWxlZCc7CiAgICAgICAgJE1lc3NhZ2UKICAgICAgICAgICAgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdUaGVyZSBpcyBhIG1hdGVyaWFsIGRpZmZlcmVuY2UgKCcpCiAgICAgICAgICAgIC4gJFRpbWVEaWZmZXJlbmNlCiAgICAgICAgICAgIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnIHNlY29uZHMpIGJldHdlZW4gYXBwbGljYXRpb24gc2VydmVyICgnKQogICAgICAgICAgICAuICRUaW1lQXBwbGljYXRpb25TZXJ2ZXIgLiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCcpIGFuZCBkYXRhYmFzZSBzZXJ2ZXIgKCcpCiAgICAgICAgICAgIC4gJFRpbWVEYXRhYmFzZVNlcnZlciAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJykgdGltZS4nKTsKICAgIH0KCiAgICAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDdXJyZW50IFRpbWVzdGFtcCBDaGVjaycpLAogICAgICAgIERlc2NyaXB0aW9uID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NoZWNrICJTeXN0ZW0gVGltZSIgdnMgIkN1cnJlbnQgVGltZXN0YW1wIi4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgpzdWIgX1RhYmxlQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgIG15ICREYXRhID0ge307CgogICAgIyB0YWJsZSBjaGVjawogICAgbXkgJEZpbGUgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSG9tZScpIC4gJy9zY3JpcHRzL2RhdGFiYXNlL290cnMtc2NoZW1hLnhtbCc7CiAgICBpZiAoIC1mICRGaWxlICkgewogICAgICAgIG15ICRDb3VudCAgID0gMDsKICAgICAgICBteSAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgICAgIG15ICRNZXNzYWdlID0gJyc7CiAgICAgICAgbXkgJENvbnRlbnQgPSAnJzsKICAgICAgICBteSAkSW47CiAgICAgICAgaWYgKCBvcGVuKCAkSW4sICc8JywgJEZpbGUgKSApIHsKICAgICAgICAgICAgd2hpbGUgKDwkSW4+KSB7CiAgICAgICAgICAgICAgICAkQ29udGVudCAuPSAkXzsKICAgICAgICAgICAgfQogICAgICAgICAgICBjbG9zZSgkSW4pOwogICAgICAgICAgICBteSBAWE1MSGFzaCA9ICRTZWxmLT57WE1MT2JqZWN0fS0+WE1MUGFyc2UyWE1MSGFzaCggU3RyaW5nID0+ICRDb250ZW50ICk7CgogICAgICAgICAgICBteSBAUHJvYmxlbXM7CiAgICAgICAgICAgIGZvciBteSAkVGFibGUgKCBAeyAkWE1MSGFzaFsxXS0+e2RhdGFiYXNlfS0+WzFdLT57VGFibGV9IH0gKSB7CiAgICAgICAgICAgICAgICBpZiAoJFRhYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgJENvdW50Kys7CgogICAgICAgICAgICAgICAgICAgICMgdXNlICdDSEVDSyBUQUJMRSctc3RhdGVtZW50IHRvIGRldGVybWluZSBzdGF0ZSBvZiBlYWNoIHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIyAod2hpY2ggbWF5IHlpZWxkIHNldmVyYWwgbGluZXMgcGVyIHRhYmxlLCB0aGUgbGFzdCBvZiB3aGljaCB3aWxsCiAgICAgICAgICAgICAgICAgICAgIyBjb250YWluIHRoZSBvdmVyYWxsIHN0YXRlIG9mIHRoYXQgdGFibGUpCiAgICAgICAgICAgICAgICAgICAgIyBEbyBxdWljayBjaGVja3Mgb24gdGFibGVzLCBvdGhlciB3YXkgaXQgdGFrZXMgb3ZlciA0MjAgc2VjCiAgICAgICAgICAgICAgICAgICAgIyBvciBsb25nZXIgdG8gY2hlY2sgaXQuCiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSggU1FMID0+ICJDSEVDSyBUQUJMRSAkVGFibGUtPntOYW1lfSBGQVNUIFFVSUNLIiApCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG15ICRTdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU3RhdHVzID0gJFJvd1szXTsgICAgIyBsb29rIGF0IGZpZWxkICdNc2dfdGV4dCcKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBuZXh0IGlmICRTdGF0dXMgPX4gL14oT0t8VGFibGVcc2lzXHNhbHJlYWR5XHN1cFxzdG9cc2RhdGUpL2k7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2ggQFByb2JsZW1zLCAiJFRhYmxlLT57TmFtZX1cWyRTdGF0dXNcXSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwdXNoIEBQcm9ibGVtcywgIiRUYWJsZS0+e05hbWV9XFsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ3VuYWJsZSB0byBjaGVjayB0YWJsZScpIC4gIlxdIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKEBQcm9ibGVtcykgewogICAgICAgICAgICAgICAgJE1lc3NhZ2UgPSBqb2luICJcbiIsIEBQcm9ibGVtczsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAgICAgICAgICRNZXNzYWdlID0gIiRDb3VudCAiIC4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgndGFibGVzIGNoZWNrZWQuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJERhdGEgPSB7CiAgICAgICAgICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdUYWJsZSBDaGVjaycpLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgZXhpc3RpbmcgZnJhbWV3b3JrIHRhYmxlcy4nKSwKICAgICAgICAgICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgICAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJERhdGEgPSB7CiAgICAgICAgICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdUYWJsZSBDaGVjaycpLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgZXhpc3RpbmcgZnJhbWV3b3JrIHRhYmxlcy4nKSwKICAgICAgICAgICAgICAgIENvbW1lbnQgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoIkNhbid0IG9wZW4gZmlsZSIpIC4gIiAkRmlsZTogJCEiLAogICAgICAgICAgICAgICAgQ2hlY2sgICAgICAgPT4gJ0NyaXRpY2FsJywKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkRGF0YSA9IHsKICAgICAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnVGFibGUgQ2hlY2snKSwKICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgZXhpc3RpbmcgZnJhbWV3b3JrIHRhYmxlcy4nKSwKICAgICAgICAgICAgQ29tbWVudCAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgiQ2FuJ3QgZmluZCBmaWxlIikgLiAiICRGaWxlISIsCiAgICAgICAgICAgIENoZWNrICAgICAgID0+ICdDcml0aWNhbCcsCiAgICAgICAgfTsKICAgIH0KICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9EYXRhYmFzZVNpemVDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgbXkgJERhdGEgPSB7fTsKCiAgICAjIGNhbGN1bGF0ZSBhbmQgZGlzcGxheSBkYXRhYmFzZSBzaXplCiAgICBteSAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdDb3VsZCBub3QgZGV0ZXJtaW5lIGRhdGFiYXNlIHNpemUuJyk7CiAgICBteSAkREJOYW1lOwoKICAgICRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKAogICAgICAgIFNRTCAgID0+ICJTRUxFQ1QgREFUQUJBU0UoKSIsCiAgICAgICAgTGltaXQgPT4gMSwKICAgICk7CgogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICBpZiAoICRSb3dbMF0gKSB7CiAgICAgICAgICAgICREQk5hbWUgPSAkUm93WzBdOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoJERCTmFtZSkgewogICAgICAgICRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKAogICAgICAgICAgICBTUUwgPT4gIlNFTEVDVCBST1VORCgoU1VNKGRhdGFfbGVuZ3RoICsgaW5kZXhfbGVuZ3RoKSAvIDEwMjQgLyAxMDI0IC8gMTAyNCksMykgIgogICAgICAgICAgICAgICAgLiAiRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEuVEFCTEVTIFdIRVJFIHRhYmxlX3NjaGVtYSA9ID8gR1JPVVAgQlkgdGFibGVfc2NoZW1hIiwKICAgICAgICAgICAgQmluZCAgPT4gWyBcJERCTmFtZSBdLAogICAgICAgICAgICBMaW1pdCA9PiAxLAogICAgICAgICk7CgogICAgICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgICAgIGlmICggJFJvd1swXSApIHsKICAgICAgICAgICAgICAgICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGF0YWJhc2Ugc2l6ZSBpcycpIC4gIiAkUm93WzBdIEdCLiI7CiAgICAgICAgICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkTWVzc2FnZSA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0NvdWxkIG5vdCBkZXRlcm1pbmUgZGF0YWJhc2UgbmFtZS4nKTsKICAgIH0KCiAgICAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdEYXRhYmFzZSBTaXplJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnU2l6ZSBvZiB0aGUgY3VycmVudCBkYXRhYmFzZS4nKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkTWVzc2FnZSwKICAgICAgICBDaGVjayAgICAgICA9PiAkQ2hlY2ssCiAgICB9OwogICAgcmV0dXJuICREYXRhOwp9CgoxOwo=</File>
        <File Location="Kernel/System/Support/Webserver.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIucG0gLSBhbGwgcmVxdWlyZWQgc3lzdGVtIGluZm9ybWF0aW9uCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTIgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBXZWJzZXJ2ZXIucG0sdiAxLjExIDIwMTIvMDkvMDQgMDQ6MTI6NDYgY2cgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMSAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlciAtIGdsb2JhbCBzeXN0ZW0gaW5mb3JtYXRpb24KCj1oZWFkMSBTWU5PUFNJUwoKQWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbiB0byBhIHJ1bm5pbmcgT1RSUyBob3N0LgoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgV2Vic2VydmVyIGluZm8gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6V2Vic2VydmVyOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRTeXN0ZW1JbmZvT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IExheW91dE9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIEFkbWluQ2hlY2tzR2V0KCkKCnJldHVybnMgYSBhcnJheSByZWZlcmVuY2Ugd2l0aCBBZG1pbkNoZWNrcyBpbmZvcm1hdGlvbi4KCiRXZWJzZXJ2ZXJBcnJheSA9PiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1BsYXR0Zm9ybScsCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdMaW51eCcsCiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAnUGxlYXNlIGFkZCBtb3JlIG1lbW9yeS4nLAogICAgICAgICAgICAgICAgQ2hlY2sgPT4gJ09LJywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSA9PiAnVmVyc2lvbicsCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdvcGVuU1VTRSAxMC4yJywKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICdQbGVhc2UgYWRkIG1vcmUgbWVtb3J5LicsCiAgICAgICAgICAgICAgICBDaGVjayA9PiAnT0snLAogICAgICAgICAgICB9LAogICAgICAgIF07Cgo9Y3V0CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YUFycmF5ID0gW107CgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgIyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIFdlYnNlcnZlcnMKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKCiAgICAjIHBsZWFzZSBhZGQgZm9yIGVhY2ggbmV3IGNoZWNrIGEgcGFydCBsaWtlIHRoaXMKICAgICMgICAgbXkgJE9uZUNoZWNrID0gJFNlbGYtPkNoZWNrKCk7CiAgICAjICAgIHB1c2ggKEB7JERhdGFBcnJheX0sICRPbmVDaGVjayk7CgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgIyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgdXNlZCBXZWJzZXJ2ZXIKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKCiAgICAjIHRyeSB0byBmaW5kIG91dCB3aGljaCBXZWJzZXJ2ZXIgaXMgY29uZmlndXJlZAogICAgbXkgJFdlYnNlcnZlclR5cGUgPSAnJzsKICAgIGlmICggJEVOVntTRVJWRVJfU09GVFdBUkV9ID1+IC9hcGFjaGUvaSApIHsKICAgICAgICAkV2Vic2VydmVyVHlwZSA9ICdBcGFjaGUnOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJFdlYnNlcnZlclR5cGUgPSAnSUlTJzsKICAgIH0KCiAgICAjIHRyeSB0byBnZXQgYXZhaWxhYmxlIG1vZHVsZXMgYW5kIHRoZSBkaXJlY3RvcnkgbmFtZQogICAgbXkgJERpck5hbWUgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSG9tZScpIC4gJy9LZXJuZWwvU3lzdGVtL1N1cHBvcnQvV2Vic2VydmVyJzsKCiAgICAjIHJlYWQgYWxsIGF2YWlsYWJsZSBtb2R1bGVzIGluIEBMaXN0CiAgICBteSBATGlzdCA9IGdsb2IoICREaXJOYW1lIC4gJy8qLnBtJyApOwogICAgZm9yIG15ICRGaWxlIChATGlzdCkgewoKICAgICAgICAjIHJlbW92ZSAucG0KICAgICAgICAkRmlsZSA9fiBzL14uKlwvKC4rPylcLnBtJC8kMS87CiAgICAgICAgaWYgKCAkV2Vic2VydmVyVHlwZSA9fiAvXiRGaWxlL2kgKSB7CiAgICAgICAgICAgIG15ICRHZW5lcmljTW9kdWxlID0gIktlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpXZWJzZXJ2ZXI6OiRGaWxlIjsKCiAgICAgICAgICAgICMgbG9hZCBtb2R1bGUgJEdlbmVyaWNNb2R1bGUgYW5kIGNoZWNrIGlmIGxvYWRhYmxlCiAgICAgICAgICAgIGlmICggJFNlbGYtPntNYWluT2JqZWN0fS0+UmVxdWlyZSgkR2VuZXJpY01vZHVsZSkgKSB7CgogICAgICAgICAgICAgICAgIyBjcmVhdGUgbmV3IG9iamVjdAogICAgICAgICAgICAgICAgbXkgJFN1cHBvcnRPYmplY3QgPSAkR2VuZXJpY01vZHVsZS0+bmV3KCAleyRTZWxmfSApOwogICAgICAgICAgICAgICAgaWYgKCRTdXBwb3J0T2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgbXkgJEFycmF5UmVmID0gJFN1cHBvcnRPYmplY3QtPkFkbWluQ2hlY2tzR2V0KCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAkQXJyYXlSZWYgJiYgcmVmKCRBcnJheVJlZikgZXEgJ0FSUkFZJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaCggQHskRGF0YUFycmF5fSwgQHskQXJyYXlSZWZ9ICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICByZXR1cm4gJERhdGFBcnJheTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQKCj1oZWFkMSBWRVJTSU9OCgokUmV2aXNpb246IDEuMTEgJCAkRGF0ZTogMjAxMi8wOS8wNCAwNDoxMjo0NiAkCgo9Y3V0Cg==</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/Constant.pm" Permission="644" Encode="Base64">cGFja2FnZSBBcmNoaXZlOjpUYXI6OkNvbnN0YW50OwoKQkVHSU4gewogICAgcmVxdWlyZSBFeHBvcnRlcjsKICAgICRWRVJTSU9OPSAnMC4wMic7CiAgICBASVNBICAgID0gcXdbRXhwb3J0ZXJdOwogICAgQEVYUE9SVCA9IHF3WwogICAgICAgICAgICAgICAgRklMRSBIQVJETElOSyBTWU1MSU5LIENIQVJERVYgQkxPQ0tERVYgRElSIEZJRk8gU09DS0VUIFVOS05PV04KICAgICAgICAgICAgICAgIEJVRkZFUiBIRUFEIFJFQURfT05MWSBXUklURV9PTkxZIFVOUEFDSyBQQUNLIFRJTUVfT0ZGU0VUIFpMSUIKICAgICAgICAgICAgICAgIEJMT0NLX1NJWkUgVEFSX1BBRCBUQVJfRU5EIE9OX1VOSVggQkxPQ0sgQ0FOX1JFQURMSU5LIE1BR0lDIAogICAgICAgICAgICAgICAgVEFSX1ZFUlNJT04gVU5BTUUgR05BTUUgQ0FOX0NIT1dOIE1PREUgQ0hFQ0tfU1VNIFVJRCBHSUQgCiAgICAgICAgICAgICAgICBHWklQX01BR0lDX05VTSBNT0RFX1JFQUQgTE9OR0xJTksgTE9OR0xJTktfTkFNRSBQUkVGSVhfTEVOR1RICiAgICAgICAgICAgICAgICBMQUJFTCBOQU1FX0xFTkdUSCBTVFJJUF9NT0RFCiAgICAgICAgICAgIF07CgogICAgcmVxdWlyZSBUaW1lOjpMb2NhbCBpZiAkXk8gZXEgIk1hY09TIjsKfQoKdXNlIGNvbnN0YW50IEZJTEUgICAgICAgICAgID0+IDA7CnVzZSBjb25zdGFudCBIQVJETElOSyAgICAgICA9PiAxOwp1c2UgY29uc3RhbnQgU1lNTElOSyAgICAgICAgPT4gMjsKdXNlIGNvbnN0YW50IENIQVJERVYgICAgICAgID0+IDM7CnVzZSBjb25zdGFudCBCTE9DS0RFViAgICAgICA9PiA0Owp1c2UgY29uc3RhbnQgRElSICAgICAgICAgICAgPT4gNTsKdXNlIGNvbnN0YW50IEZJRk8gICAgICAgICAgID0+IDY7CnVzZSBjb25zdGFudCBTT0NLRVQgICAgICAgICA9PiA4Owp1c2UgY29uc3RhbnQgVU5LTk9XTiAgICAgICAgPT4gOTsKdXNlIGNvbnN0YW50IExPTkdMSU5LICAgICAgID0+ICdMJzsKdXNlIGNvbnN0YW50IExBQkVMICAgICAgICAgID0+ICdWJzsKCnVzZSBjb25zdGFudCBCVUZGRVIgICAgICAgICA9PiA0MDk2Owp1c2UgY29uc3RhbnQgSEVBRCAgICAgICAgICAgPT4gNTEyOwp1c2UgY29uc3RhbnQgQkxPQ0sgICAgICAgICAgPT4gNTEyOwoKdXNlIGNvbnN0YW50IEJMT0NLX1NJWkUgICAgID0+IHN1YiB7IG15ICRuID0gaW50KCRfWzBdL0JMT0NLKTsgJG4rKyBpZiAkX1swXSAlIEJMT0NLOyAkbiAqIEJMT0NLIH07CnVzZSBjb25zdGFudCBUQVJfUEFEICAgICAgICA9PiBzdWIgeyBteSAkeCA9IHNoaWZ0IHx8IHJldHVybjsgcmV0dXJuICJcMCIgeCAoQkxPQ0sgLSAoJHggJSBCTE9DSykgKSB9Owp1c2UgY29uc3RhbnQgVEFSX0VORCAgICAgICAgPT4gIlwwIiB4IEJMT0NLOwoKdXNlIGNvbnN0YW50IFJFQURfT05MWSAgICAgID0+IHN1YiB7IHNoaWZ0KCkgPyAncmInIDogJ3InIH07CnVzZSBjb25zdGFudCBXUklURV9PTkxZICAgICA9PiBzdWIgeyAkX1swXSA/ICd3YicgLiBzaGlmdCA6ICd3JyB9Owp1c2UgY29uc3RhbnQgTU9ERV9SRUFEICAgICAgPT4gc3ViIHsgJF9bMF0gPX4gL15yLyA/IDEgOiAwIH07CgojIFBvaW50bGVzcyBhc3NpZ25tZW50IHRvIG1ha2UgLXcgc2h1dCB1cApteSAkZ2V0cHd1aWQ7ICRnZXRwd3VpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0cHd1aWQgKDApOyB9OwpteSAkZ2V0Z3JnaWQ7ICRnZXRncmdpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0Z3JnaWQgKDApOyB9Owp1c2UgY29uc3RhbnQgVU5BTUUgICAgICAgICAgPT4gc3ViIHsgJGdldHB3dWlkIHx8IHNjYWxhciBnZXRwd3VpZCggc2hpZnQoKSApIHx8ICcnIH07CnVzZSBjb25zdGFudCBHTkFNRSAgICAgICAgICA9PiBzdWIgeyAkZ2V0Z3JnaWQgfHwgc2NhbGFyIGdldGdyZ2lkKCBzaGlmdCgpICkgfHwgJycgfTsKdXNlIGNvbnN0YW50IFVJRCAgICAgICAgICAgID0+ICQ+Owp1c2UgY29uc3RhbnQgR0lEICAgICAgICAgICAgPT4gKHNwbGl0ICcgJywgJCkgKVswXTsKCnVzZSBjb25zdGFudCBNT0RFICAgICAgICAgICA9PiBkbyB7IDA2NjYgJiAoMDc3NyAmIH51bWFzaykgfTsKdXNlIGNvbnN0YW50IFNUUklQX01PREUgICAgID0+IHN1YiB7IHNoaWZ0KCkgJiAwNzc3IH07CnVzZSBjb25zdGFudCBDSEVDS19TVU0gICAgICA9PiAiICAgICAgIjsKCnVzZSBjb25zdGFudCBVTlBBQ0sgICAgICAgICA9PiAnQTEwMCBBOCBBOCBBOCBBMTIgQTEyIEE4IEExIEExMDAgQTYgQTIgQTMyIEEzMiBBOCBBOCBBMTU1IHgxMic7CnVzZSBjb25zdGFudCBQQUNLICAgICAgICAgICA9PiAnYTEwMCBhOCBhOCBhOCBhMTIgYTEyIEE4IGExIGExMDAgYTYgYTIgYTMyIGEzMiBhOCBhOCBhMTU1IHgxMic7CnVzZSBjb25zdGFudCBOQU1FX0xFTkdUSCAgICA9PiAxMDA7CnVzZSBjb25zdGFudCBQUkVGSVhfTEVOR1RIICA9PiAxNTU7Cgp1c2UgY29uc3RhbnQgVElNRV9PRkZTRVQgICAgPT4gKCReTyBlcSAiTWFjT1MiKSA/IFRpbWU6OkxvY2FsOjp0aW1lbG9jYWwoMCwwLDAsMSwwLDcwKSA6IDA7ICAgIAp1c2UgY29uc3RhbnQgTUFHSUMgICAgICAgICAgPT4gInVzdGFyIjsKdXNlIGNvbnN0YW50IFRBUl9WRVJTSU9OICAgID0+ICIwMCI7CnVzZSBjb25zdGFudCBMT05HTElOS19OQU1FICA9PiAnLi8uL0BMb25nTGluayc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIGFsbG93IFpMSUIgdG8gYmUgdHVybmVkIG9mZiB1c2luZyBFTlYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyBERUJVRyBvbmx5CnVzZSBjb25zdGFudCBaTElCICAgICAgICAgICA9PiBkbyB7ICEkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsIHsgcmVxdWlyZSBJTzo6WmxpYiB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gfHwgJEAgPyAwIDogMSB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKdXNlIGNvbnN0YW50IEdaSVBfTUFHSUNfTlVNID0+IHFyL14oPzpcMDM3XDIxM3xcMDM3XDIzNSkvOwoKdXNlIGNvbnN0YW50IENBTl9DSE9XTiAgICAgID0+IGRvIHsgKCQ+ID09IDAgYW5kICReTyBuZSAiTWFjT1MiIGFuZCAkXk8gbmUgIk1TV2luMzIiKSB9Owp1c2UgY29uc3RhbnQgQ0FOX1JFQURMSU5LICAgPT4gKCReTyBuZSAnTVNXaW4zMicgYW5kICReTyAhfiAvUklTQyg/OlsgX10pP09TL2kgYW5kICReTyBuZSAnVk1TJyk7CnVzZSBjb25zdGFudCBPTl9VTklYICAgICAgICA9PiAoJF5PIG5lICdNU1dpbjMyJyBhbmQgJF5PIG5lICdNYWNPUycgYW5kICReTyBuZSAnVk1TJyk7CgoxOwo=</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/File.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Archive/Tar.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Linux/Distribution.pm" Permission="644" Encode="Base64"></File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/Support.Default.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEB2ZXJzaW9uICAgICAkUmV2aXNpb246IDEuNSAkCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKQG1lZGlhIHNjcmVlbixwcm9qZWN0aW9uLHR2LGhhbmRoZWxkIHsKCi8qKgogKiBAcGFja2FnZSAgICAgU3VwcG9ydAogKiBAc2VjdGlvbiAgICAgR2VuZXJhbAogKi8KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0IHsKICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgI2FhYTsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0ID4gcCB7CiAgICBwYWRkaW5nOiAwIDAgMXB4IDM1cHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0T0sgPiBwIHsKICAgIGNvbG9yOiAjODg4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LOmhvdmVyID4gcCB7CiAgICBjb2xvcjogIzAwMDsKfQovKioKICogQHN1YnNlY3Rpb24gIEZsYWcKICovCi5BZG1pblN1cHBvcnQgLkZsYWcgewogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKC4uL2ltZy9mbGFnX3NoYWRvdy5wbmcpIG5vLXJlcGVhdCBzY3JvbGwgMCAwOwogICAgaGVpZ2h0OiAxOHB4OwogICAgd2lkdGg6IDI0cHg7CiAgICBmbG9hdDogbGVmdDsKICAgIG1hcmdpbjogMnB4IDEwcHggMCAwOwp9CgouQWRtaW5TdXBwb3J0IC5GbGFnLlNtYWxsIHsKICAgIHdpZHRoOiAxN3B4OwogICAgaGVpZ2h0OiAxMHB4OwogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tIHJpZ2h0Owp9CgouQWRtaW5TdXBwb3J0IC5GbGFnIHNwYW4gewogICAgZGlzcGxheTogYmxvY2s7CiAgICBoZWlnaHQ6IDE2cHg7CiAgICBtYXJnaW4tcmlnaHQ6IDJweDsKICAgIHRleHQtaW5kZW50OiAtOTk5OXB4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgLyogc2V0IGEgZGVmYXVsdCBjb2xvciBmb3IgcHJpb3JpdGllcyAqLwogICAgYmFja2dyb3VuZC1jb2xvcjogI2NkY2RjZDsKfQoKLkFkbWluU3VwcG9ydCAuRmxhZy5TbWFsbCBzcGFuIHsKICAgIGhlaWdodDogOHB4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwODAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRGYWlsZWQgLkZsYWcgc3BhbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOwp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdENyaXRpY2FsIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRDcml0aWNhbCAuRmxhZyBzcGFuIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmEwMDA7Cn0KCgp9IC8qIGVuZCBAbWVkaWEgKi8=</File>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Type="post" Name="support_bench_test">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUpgrade>
        <TableCreate Type="post" Name="support_bench_test" Version="1.0.8">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseUpgrade>
    <DatabaseUninstall>
        <TableDrop Type="post" Name="support_bench_test">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>